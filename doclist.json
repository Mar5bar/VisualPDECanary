[{"layout":"page","title":"Chemical Basis of Morphogenesis","lesson_number":30,"thumbnail":"/assets/images/chemicalBasis.webp","extract":"A transformative text","equation":"$\\pd{u}{t}=\\nabla^2 u+a-u+u^2v,$ $\\pd{v}{t}=D\\nabla^2v+ b-u^2v$","categories":["art","patterns","parabolic"],"body":"This is the first page of Alan Turing's [The Chemical Basis of Morphogenesis](https://en.wikipedia.org/wiki/The_Chemical_Basis_of_Morphogenesis) paper undergoing pattern formation. The kinetics are exactly from the [Schnakenberg example](/mathematical-biology/schnakenberg): $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ b-u^2v,\\end{aligned}$$ but we have taken an initial condition from an image of the first page of Turing's text. * Load the [interactive simulation](/sim/?preset=chemicalBasisOfMorphogenesis). * Press {{ layout.play }} to see this evolve! You can pause the simulation and press {{ layout.erase }} to reset the text. * Modifying different parameters (particularly $b$) can lead to qualitatively different solutions. Try $b=0.6$ for example. Try decreasing $b$ very slowly with the slider to see the pattern change. ","url":"/art-pdes/chemical-basis","tags":["art","patterns","parabolic"],"img":"/assets/images/chemicalBasis.webp","page_number":30,"id":0},{"layout":"page","title":"We ❤️ PDEs","lesson_number":40,"thumbnail":"/assets/images/hearts.webp","extract":"Beating hearts and slime moulds","equation":"$\\pd{u}{t}=\\nabla^2 u+$❤️","categories":["art","patterns","chaos","parabolic"],"body":"Here are some examples of a PDE solutions on a domain based on a [heart-shaped curve](https://mathworld.wolfram.com/HeartCurve.html). # Excitability Models like [FitzHugh–Nagumo](/mathematical-biology/fitzhugh-nagumo) are the basis for a lot of work in cardiac electrophysiology and related areas. So let's solve these PDEs in a heart! * Load this [FitzHugh–Nagumo simulation](/sim/?preset=FHNBeatingHeart) and enjoy. You can click {{ layout.views }} and select **3D** to get a 3D view of the beating heart. * Try this [growing simulation](/sim/?preset=FHNGrowingHeart) for a crude implementation of these equations on a growing domain. # Chemotaxis The next example is based on the [Keller--Segel model for chemotaxis](/mathematical-biology/keller-segel). * Load this [Keller--Segel simulation](/sim/?preset=KellerSegelHeart) and enjoy! * Try this [growing simulation](/sim/?preset=KellerSegelGrowingHeart) for a crude implementation of these equations on a growing domain. # Warm hearted By plotting vector fields on top of the solutions to PDEs, as exemplified in [the heat equation](/basic-pdes/heat-equation), we can visualise how heat flows from a source as it traces out a heart in this [interactive simulation](/sim/?preset=heatHeart). ","url":"/art-pdes/chemotaxis-love","tags":["art","patterns","chaos","parabolic"],"img":"/assets/images/hearts.webp","page_number":40,"id":1},{"layout":"page","title":"Kovalevskaya on chaos","lesson_number":150,"thumbnail":"/assets/images/Kovalevskaya.webp","extract":"Playing in time and space","equation":"$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)(1-I_S(x,y))\\psi+(b_r+\\i b_i)\\psi|\\psi|^2$","categories":["art","chaos","parabolic"],"body":"Functions of space can allow us to change how a PDE solution varies in space and time. This page explores an example using an image of [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) encoded as the function $I_S(x,y)$. The system uses the [complex Ginzburg–Landau equation](/nonlinear-physics/nls-cgl). * Load one of the interactive simulations demonstrating [dark soliton pinning](/sim/?preset=SofyaCGLEDuckPinning), [localised chaos](/sim/?preset=SofyaCGLEChaos), or [fireflies](/sim/?preset=SofyaCGLEFireflies). * You can upload your own image by clicking on {{ layout.settings }} → **Images** and then clicking on the image of Sofya Kovalevskaya's face next to $I_S(x,y)$. The image will be effectively treated as a greyscale function $I_T(x,y)$, which will be approximately 1 when the image is close to white and approximately 0 when the image is close to black. * Change $I_T$ to $I_S$ in {{ layout.equations }} → **Definitions** to see another famous mathematical face: [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing). * You can upload a replacement for either of these images under {{ layout.settings }} → **Images**. They can each be used as heterogeneities in many parts of VisualPDE. ","url":"/art-pdes/kovalevskaya","tags":["art","chaos","parabolic"],"img":"/assets/images/Kovalevskaya.webp","page_number":150,"id":2},{"layout":"page","title":"A-maze-ing PDEs","lesson_number":50,"thumbnail":"/assets/images/maze.webp","extract":"Searching for love in all the wrong places","equation":"$\\pd{🐀}{t}=D_🐀\\vnabla\\cdot (\\vnabla 🐀-g(🐀)\\vnabla🧀)+f(🐀,🧀),$ $\\pd{🧀}{t}=D_🧀 \\nabla^2🧀+g(🐀,🧀)$","categories":["art","parabolic"],"body":"This is a simulation of a chemotaxis-like system which tries to solve a maze by gobbling up all the food as it goes. There is a source of food at the edge of the maze, and some initial (but slowly decaying) food spread throughout the maze. Will the population make it to the end? Can a web-based PDE solver help complete such puzzles? Find out in the [interactive simulation](/sim/?preset=maze)! $$ \\begin{aligned}\\pd{🐀}{t}&=D_🐀\\vnabla\\cdot (\\vnabla 🐀-g(🐀)\\vnabla🧀)+f(🐀,🧀),\\\\ \\pd{🧀 }{t}&=D_🧀 \\nabla^2🧀 +g(🐀,🧀)\\end{aligned} $$ ","url":"/art-pdes/maze","tags":["art","parabolic"],"img":"/assets/images/maze.webp","page_number":50,"id":3},{"layout":"page","title":"Spiral waves","lesson_number":40,"thumbnail":"/assets/images/spiralWaves.webp","extract":"You spin me right ’round, baby","equation":"$\\pd{u}{t}=D_u\\nabla^2 u+au-(u+cv)(u^2+v^2),$ $\\pd{v}{t}=D_v\\nabla^2v+av+(cu-v)(u^2+v^2)$","categories":["art","waves","chaos","parabolic"],"body":"This is a simulation of a reaction–diffusion system loosely related to $\\lambda$-$\\omega$ models of spiral waves, which takes the form: $$ \\begin{aligned}\\pd{u}{t}&=D_u\\nabla^2 u+au-(u+cv)(u^2+v^2),\\\\ \\pd{v}{t}&=D_v\\nabla^2v+av+(cu-v)(u^2+v^2),\\end{aligned} $$ * Load the [interactive simulation](/sim/?preset=lambdaOmega). This plots the solution as the quantity $u^2+v^2$, which evolves from a wave-like initial condition into broken waves which coalesce into spiral waves as the seemingly most stable structures. * Clicking can perturb these waves, and clicking with dragging can induce new spiral centres (or destroy old ones). * You can also generate your own waves by setting the initial conditions to zero under {{ layout.equations }} → **Initial conditions**, and then clicking to generate radial pulses, or dragging to perturb them. ","url":"/art-pdes/spiral-waves","tags":["art","waves","chaos","parabolic"],"img":"/assets/images/spiralWaves.webp","page_number":40,"id":4},{"layout":"page","title":"Turing on Turing","lesson_number":3,"thumbnail":"/assets/images/alan4.webp","extract":"Turing patterns in Turing's image","equation":"$\\pd{u}{t}=\\nabla^2 u+(1-T(x,y)) - u + u^2v,$ $\\pd{v}{t}=D\\nabla^2v+ 1 - u^2v$","categories":["art","patterns","parabolic"],"body":"Functions of space can allow us to change how a PDE solution varies in space and time. Here is an example using such a function, given by $I_T(x,y)$, where this function represents a picture. The equations are based on the [Schnakenberg](/mathematical-biology/schnakenberg) model. * Load the interactive [Turing simulation](/sim/?preset=Alan). * You can upload your own image by clicking on {{ layout.settings }} → **Images** and then clicking on the image of [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing)'s face next to $I_T(x,y)$. The image will be effectively treated as a greyscale function $I_T(x,y)$, which will be approximately 1 when the image is close to white and approximately 0 when the image is close to black. * Change $I_T$ to $I_S$ in {{ layout.equations }} → **Definitions** to see another famous mathematical face. [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) also has her own interactive [Sofya simulation](/sim/?preset=Sofya). # Other images You can upload a replacement for either of these images under {{ layout.settings }} → **Images**. They can each be used as heterogeneities in many parts of VisualPDE. Some examples include: * [a Halloween design](/sim/?preset=Jack) * [a VisualPDE QR code](/sim/?preset=QR) * [a spiralling shell](/sim/?preset=shell) ","url":"/art-pdes/turing-face","tags":["art","patterns","parabolic"],"img":"/assets/images/alan4.webp","page_number":3,"id":5},{"layout":"page","title":"Convection–diffusion","lesson_number":70,"thumbnail":"/assets/images/AdvectionEquation.webp","extract":"Movement along streamlines","equation":"$\\pd{u}{t}=D \\nabla^2 u-\\v{v}\\cdot \\vnabla u$","categories":["linear","parabolic"],"body":"We now look at the [advection equation](https://en.wikipedia.org/wiki/Advection#The_advection_equation) with diffusion (also known as the [convection–diffusion equation](https://en.wikipedia.org/wiki/Convection%E2%80%93diffusion_equation), or sometimes the damped one-way wave equation). This takes the form $$\\pd{u}{t}=D \\nabla^2 u-\\v{v}\\cdot \\vnabla u,$$ where we consider two forms of the advection/drift velocity $\\v{v}$: $$ \\begin{align} \\v{v} &= V(y,-x),\\\\ \\text{or} \\quad \\v{v} &= V(\\cos(\\theta),\\sin(\\theta)), \\end{align} $$ where $\\theta$ is a parameter The first of these expressions is a rotational velocity field about the centre of the domain, whereas the second is linear (unidirectional) advection in the direction $\\theta$. * Load the [interactive simulation with rotational advection](/sim/?preset=AdvectionEquationRotational). By default it uses Dirichlet boundary conditions. * Clicking in the domain introduces some amount of mass which diffuses and advects along the rotating vector field. Importantly, Dirichlet boundary conditions will not conserve mass, and so you may see odd effects near the edges of the domain, such as the concentration being destroyed. * Changing the value of $V$ will change the speed of the rotation, though $V$ much larger than the initial value may lead to bad solutions (see the numerical notes below). Making $V$ negative will change the direction of the rotation. * Now click the [interactive simulation with unidirectional advection](/sim/?preset=AdvectionEquationDirected). By default it uses Periodic boundary conditions. * Changing $\\theta$ will change the direction of advection, and $V$ the magnitude. This form of advection is less sensitive to details like boundary conditions, so these can be changed to explore different scenarios. * In both examples, you can go to {{ layout.views }} to change to a view that also plots the vector field $\\v{v}$ as arrows on top of the concentration profiles. ## Numerical notes First-order derivatives are in general harder to deal with numerically for a variety of reasons, and in particular models involving them can depend more subtly on details such as smoothness of initial conditions. In this example, we are using a different form of the brush, which can be found under {{ layout.settings }} → **Brush** This adds some smoothing to the boundaries of the bump each time the screen is clicked. This is important to reduce spurious oscillations due to the first derivative terms. ","url":"/basic-pdes/advection-equation","tags":["linear","parabolic"],"img":"/assets/images/AdvectionEquation.webp","page_number":70,"id":6},{"layout":"page","title":"Heat equation","lesson_number":1,"thumbnail":"/assets/images/heat-equation.webp","extract":"Explore how heat diffuses over time","equation":"$\\pd{T}{t}=D_T \\nabla^2 T$","categories":["linear","parabolic"],"body":"Let's start by solving the [heat equation](https://en.wikipedia.org/wiki/Heat_equation), $$\\pd{T}{t}=D_T \\nabla^2 T,$$ on a [rectangular 2D domain](/user-guide/quick-start#domain-shape) with homogeneous Neumann (aka no-flux) [boundary conditions](/user-guide/quick-start#boundary-conditions), $$\\pd{T}{x}(0,y,t) = \\pd{T}{x}(L_x,y,t) = \\pd{T}{y}(x,0,t) = \\pd{T}{y}(x,L_y,t) = 0.$$ 1. Load the [interactive simulation](/sim/?preset=heatEquation), which has been set up for this tutorial. 1. Click on the screen to visualise the spread of heat throughout the domain. When you click, you add localised heat to the domain. 1. Now press {{ layout.pause }}, paint some initial data, and then press {{ layout.play }} to set it in motion. 1. Press {{ layout.erase }} to clear the screen. 1. You can press {{ layout.views }} to change from a plot of just the density of $T$ to a plot of $T$ augmented with the vector field given by $-\\vnabla T$. This makes arrows that show the flux of heat as it dissipates and moves around the domain. ### Playing with the diffusion coefficient, $D_T$ What does changing the diffusion coefficient, $D_T$, do? 1. Change its value by clicking {{ layout.equations }} and editing the value of $D_T$: try increasing it by a factor of 10. 1. Now click again on the screen and see how fast this blob spreads out throughout the domain. Explore how the speed depends on the diffusion coefficient. You can safely increase $D_T$ up to around $D=50$ without hitting numerical problems: see the discussion on [timestepping issues](/user-guide/solver#timestepping). ### Playing with boundary conditions What effect do the boundary conditions have? 1. Click around the corners and edges to see how the Neumann boundary conditions conserve the total amount of heat within the domain. 1. Now, go to {{ layout.equations }} → **Boundary conditions** and select **Periodic** for $T$. What do you notice? Is the total amount of heat still conserved? 1. What if you change the boundary conditions to **Dirichlet**? Explore how heat flows through the domain under these different scenarios. ### Exact solutions in 1D We now explore analytical solutions in one spatial dimension. We can solve the equation to get the following solution using the initial condition, $$ T(x,0) = \\cos\\left(\\frac{m\\pi}{L}\\right) \\implies T(x,t) = \\mathrm{e}^{-Dt\\left(\\frac{m\\pi}{L}\\right)^2}\\cos\\left(\\frac{m\\pi x}{L}\\right), $$ with $m$ a positive integer. These solutions decay to 0 as time increases. Importantly, the rate of decay depends on the frequency of the initial perturbation $m$, with larger $m$ (or larger $D_T$) leading to more quickly decaying solutions. * You can explore these solutions in this [1D simulation](/sim/?preset=heatEquation1D). ","url":"/basic-pdes/heat-equation","tags":["linear","parabolic"],"img":"/assets/images/heat-equation.webp","page_number":1,"id":7},{"layout":"page","title":"Inhomogeneous heat equation","lesson_number":30,"thumbnail":"/assets/images/InhomHeatEquation.webp","extract":"Sources and sinks of heat","equation":"$\\pd{T}{t}= \\vnabla\\cdot(g(x,y)\\vnabla T)+f(x,y)$","categories":["linear","parabolic"],"body":"We now consider an inhomogeneous [heat equation](https://en.wikipedia.org/wiki/Heat_equation) given by $$\\pd{T}{t}=D \\nabla^2 T+f(x,y),$$ $$f(x,y) = D\\pi^2\\left(\\frac{n^2}{L_x^2} + \\frac{m^2}{L_y^2}\\right)\\cos \\left(\\frac{n\\pi x}{L_x} \\right)\\cos \\left(\\frac{m\\pi y}{L_y} \\right)$$ with homogeneous Neumann (aka no-flux) boundary conditions on a rectangular domain with side lengths $L_x$, $L_y$. You can use [separation of variables](https://en.wikipedia.org/wiki/Separation_of_variables#Partial_differential_equations) to show that the solution at steady state looks like $$T(x,y) = -\\cos \\left(\\frac{n\\pi x}{L_x} \\right)\\cos \\left(\\frac{m\\pi y}{L_y} \\right).$$ * Load this [interactive simulation](/sim/?preset=inhomogHeatEquation). * You can change the values of $m$ and $n$ to observe different patterns of sources/sinks of heat in the domain. * You can use any function $f(x,y)$ instead of the one given above. However, if $f(x,y)$ does not satisfy the constraint that $\\int_0^{L_y}\\int_0^{L_x} f(x,y) \\, \\d x \\, \\d y=0$, then the solution will either grow or decrease without bound. An easy way to prove this is to multiply the equation by $T$ and integrate to find, after applying the Neumann boundary conditions, $$ \\frac{1}{2}\\pd{}{t}\\int_0^{L_y} \\int_0^{L_x} T^2 \\, \\d x \\, \\d y = \\int_0^{L_y}\\int_0^{L_x} f(x,y) \\, \\d x \\, \\d y. $$ ## Inhomogeneous transport We can also consider a diffusion coefficient which varies in space by studying $$ \\pd{T}{t}= \\vnabla\\cdot(g(x,y)\\vnabla T), $$ where we need $g(x,y)>0$ for all $x,y$ in the domain. As a simple (though complicated-looking) example, we take, $$g(x,y) = D\\left[1+E\\cos\\left(\\frac{n \\pi}{L_xL_y}\\sqrt{(x-L_x/2)^2+(y-L_y/2)^2}\\right)\\right],$$ where $D>0$, $n>0$, and $\\lvert E\\rvert <1$ are constants. This represents radially-oscillating regions of high and low diffusion. Setting an initial condition of $$u(x,y,0)=1$$ and Dirichlet boundary conditions, we can observe an immediate partitioning of the initial heat into regions bounded by the maxima of the cosine function. * Click in this [inhomogeneous simulation](/sim/?preset=inhomogDiffusionHeatEquation) to see this, and play around with the values of $n$, $E$ and $D$. ","url":"/basic-pdes/inhomogeneous-heat-equation","tags":["linear","parabolic"],"img":"/assets/images/InhomHeatEquation.webp","page_number":30,"id":8},{"layout":"page","title":"Inhomogeneous wave equation","lesson_number":40,"thumbnail":"/assets/images/InhomWaveEquation.webp","extract":"Waves through a complex medium","equation":"$\\pdd{u}{t}= \\vnabla\\cdot(f(x,y)\\vnabla u) $","categories":["linear","hyperbolic"],"body":"We now consider an inhomogeneous [wave equation](https://en.wikipedia.org/wiki/Heat_equation), $$\\pdd{u}{t}=\\vnabla\\cdot(f(x,y)\\vnabla u),$$ with homogeneous Neumann (aka no-flux) boundary conditions. This equation can be solved numerically as long as $f(x,y)>0$ for all $x,y$ in the domain. * Load the [interactive simulation](/sim/?preset=inhomogWaveEquation), which uses the example $$f(x,y) = D\\left[1+E\\sin\\left(\\frac{m\\pi x}{L_x}\\right)\\right]\\left[1+E\\sin\\left(\\frac{n\\pi y}{L_y}\\right)\\right].$$ Importantly, we need $\\lvert E\\rvert<1$ to ensure the solution makes sense. * You can change the values of $m$ and $n$ to observe different patterns of regions where waves propagate at different speeds. In particular, using the the function $f(x,y)$ above will lead to corners inside of the domain with very slow wave speeds, and these will become visually apparent quickly. * Unlike in the [homogeneous case](/basic-pdes/wave-equation), we by default plot $u$ here, but you can change this to $v$ by clicking {{ layout.views }}. ### Damped waves and inhomogeneous boundaries We next consider the damped wave equation, $$\\pdd{u}{t} +d\\pd{u}{t}=D\\nabla^2 u,$$ with inhomogeneous Dirichlet boundary conditions, $$u|_{\\partial \\Omega} = \\cos\\left(\\frac{m \\pi x}{100}\\right)\\cos\\left(\\frac{m \\pi y}{100}\\right),$$ on a square domain. * Load this [damped simulation](/sim/?preset=dampedWaveEquation), where initially $d=0$. * Try increasing the damping $d$ to, for example, $d=0.01$ to observe how this changes the wave propagation into the domain from the boundaries. * What happens when you play with the frequency, $m$? ","url":"/basic-pdes/inhomogeneous-wave-equation","tags":["linear","hyperbolic"],"img":"/assets/images/InhomWaveEquation.webp","page_number":40,"id":9},{"layout":"page","title":"Linearly elastic models","lesson_number":60,"thumbnail":"/assets/images/plateEquation.webp","extract":"Bending beams and deforming plates","equation":"$\\pdd{u}{t}=-D^2 \\nabla^4 u-Q$","categories":["linear","elasticity","hyperbolic"],"body":"Let's consider a (damped) [beam equation](https://en.wikipedia.org/wiki/Euler%E2%80%93Bernoulli_beam_theory): $$\\pdd{u}{t}+ C\\pd{u}{t}=-D^2 \\frac{\\partial^4 u}{\\partial x^4} u-Q,$$ initially with fixed boundary conditions given by $$u=0 \\quad \\text{and} \\quad \\pdd{u}{x} = 0 $$ along the boundary. The constant $D$ represents the relative size of the domain and its material properties (e.g. stiffness), $C>0$ is a damping constant, and $q>0$ a gravity-like force. * Load the interactive [beam equation simulation](/sim/?preset=BeamEquation). * Click to push down on the beam, creating a localised depression which creates ripples in the beam nearby. * Now go to {{ layout.equations }} → **Boundary conditions** and select **Neumann** for $u$, $v$, and $w$. This will use the following 'free end' boundary conditions: $$ \\pdd{u}{x}=0 \\quad \\text{and} \\quad \\frac{\\partial^3 u}{\\partial x^3} = 0. $$ ## Deformable plates Let's next look at the (damped) [plate equation](https://en.wikipedia.org/wiki/Kirchhoff%E2%80%93Love_plate_theory), $$\\pdd{u}{t}+ C\\pd{u}{t}=-D^2 \\nabla^4 u-Q,$$ with fixed boundary conditions given by $$u=0 \\quad \\text{and} \\quad \\nabla^2 u = 0 $$ along the boundary. * Load the [plate equation simulation](/sim/?preset=plateEquation). * Initially the plate is deformed to a value of $u=-4$ everywhere, representing an initial deformation which instantaneously snaps to the fixed condition of $u=0$ at the edges, which gives rise to compression waves which propagate inwards. * Click to compress the plate downward locally, and observe waves propagating from this disturbance. ## Numerical notes As in previous examples, we must write the second time derivative using a system of first-order equations. We also have to use an algebraic equation to represent the biharmonic term: $$\\begin{aligned}\\pd{u}{t}&=v+DD_c\\nabla^2 u,\\\\ \\pd{v}{t} &= -D \\nabla^2 w -Cv -Q,\\\\ w &= D \\nabla^2u, \\end{aligned}$$ which is the plate equation for $D_c=0$. The parameter $D_c$ is used to prevent spurious oscillations as seen in the wave equation. ## 3D deformations * Load the [3D simulation](/sim/?preset=plateEquation3D). * Click! This is the same simulation as in the 2D plate equation above, but shown in 3D with a view that can be rotated. ","url":"/basic-pdes/plate-equation","tags":["linear","elasticity","hyperbolic"],"img":"/assets/images/plateEquation.webp","page_number":60,"id":10},{"layout":"page","title":"Schrödinger equation","lesson_number":50,"thumbnail":"/assets/images/SchrodingerEquation.webp","extract":"Interactive quantum mechanics","equation":"$\\i\\hbar\\pd{\\psi}{t}=-\\frac{\\hbar}{2m}\\nabla^2 \\psi+V(x,t)\\psi$","categories":["linear","integrable","parabolic"],"body":"We now consider the [Schrödinger equation](https://en.wikipedia.org/wiki/Schrödinger_equation), $$\\i\\hbar\\pd{\\psi}{t}=-\\nabla^2 \\psi+V(x,t)\\psi,$$ with homogeneous Dirichlet boundary conditions. We will first consider a variant of this equation with *artificial diffusion*, as in [the wave equation](/basic_pdes/wave-equation) shown before, which takes the form $$\\pd{\\psi}{t}=\\i D\\nabla^2 \\psi+DC\\nabla^2 \\psi,$$ where $D,C>0$ are positive constants. We use the initial condition $$\\psi(x,y,0) = \\sin(m\\pi x)\\sin(n\\pi y),$$ as this corresponds to a given energy state of the system. * Load the [interactive simulation](/sim/?preset=stabilizedSchrodingerEquation). * You can change the initial eigenfunction frequency by modifying $n$ and $m$, and then pressing 'R' to restart the simulation. * By default, the solution plotted is the density $$\\lvert \\psi\\rvert^2 = \\Re(\\psi)^2+\\Im(\\psi)^2 = u^2+v^2$$, which will be (approximately) stationary for long periods of time. You can plot only the real or imaginary part under the Views pane by clicking {{ layout.views }}, and see how these solutions now oscillate in both space and time. Increasing the values of $n$ and $m$ will increase the speed at which this oscillation occurs, as such an initial condition will correspond to higher energy states. ## Heterogeneous potentials We can also choose a potential $V(x,y)$ which has the effect of localising some features of the solution. As an example, we consider $$\\begin{aligned}V(x,y) &= \\sin(n \\pi x)\\sin(m\\pi y),\\\\ \\psi(x,y,0) &= (\\sin(\\pi x)\\sin(\\pi y))^{10}, \\end{aligned}$$ which can be played with in this [heterogeneous simulation](/sim/?preset=stabilizedSchrodingerEquationPotential). As the solution evolves, one can observe *tunnelling* from local potential wells where the solution is highly concentrated, out to potential wells further away from the localised initial condition. Note that here the colour scale is constantly changing to observe the maximal and minimal values of $\\lvert \\psi \\rvert$, as these vary substantially during an oscillation. ## Numerical notes The solver only works for real systems of equations. So in fact what is being simulated is the system $$\\begin{aligned}\\pd{u}{t}&=-D\\nabla^2 v+CD\\nabla^2 u+V(x,y) v,\\\\ \\pd{v}{t} &= D\\nabla^2 u+CD\\nabla^2 v-V(x,y)u, \\end{aligned}$$ which is a (nondimensionalised) Schrödinger equation for $C=0$. The parameter $C$ is used to prevent spurious oscillations. Of course, even with this artificial parameter $C$, our numerical method does not preserve probability, given by $$ \\int_0^L \\int_0^L |\\psi|^2 \\d x \\, \\d y = \\int_0^L \\int_0^L (u^2+v^2) \\, \\d x \\, \\d y = 1, $$ as can be seen in the 1D example below. ## Particle in a 1D potential well We can consider an analogue of a particle in a potential well by putting a [Gaussian wave packet](https://en.wikipedia.org/wiki/Wave_packet#Gaussian_wave_packets_in_quantum_mechanics) inside a quadratic potential. For short times, such a wave packet acts like a particle bouncing between the two walls of the potential with some fixed energy, as you can see in this [1D simulation](/sim/?preset=stabilizedSchrodinger1D). The total probability, shown in the bottom corner, is approximately conserved here as we have set $C=1$ and taken a sufficiently small simulation step, consistent with [more sophisticated simulation techniques](http://www.astro.utoronto.ca/~mahajan/notebooks/quantum_tunnelling.html). See the discussion at the bottom of [Validating VisualPDE](/numerical-methods/validating-VisualPDE) for more details about the sensitivity to timestepping accuracy. ","url":"/basic-pdes/stabilised-schrodinger","tags":["linear","integrable","parabolic"],"img":"/assets/images/SchrodingerEquation.webp","page_number":50,"id":11},{"layout":"page","title":"Wave equation","lesson_number":2,"thumbnail":"/assets/images/waveEquation.webp","extract":"Play with waves and vibrations","equation":"$\\pdd{u}{t}=D \\nabla^2 u$","categories":["linear","waves","hyperbolic"],"body":"Let's next look at the [wave equation](https://en.wikipedia.org/wiki/Wave_equation), $$\\pdd{u}{t}=D \\nabla^2 u,$$ on a rectangular 2D domain with homogeneous Neumann (aka no-flux) boundary conditions, $$\\pd{u}{x}(0,y,t) = \\pd{u}{x}(L_x,y,t) = \\pd{u}{y}(x,0,t) = \\pd{u}{y}(x,L_y,t) = 0.$$ 1. Load the [interactive simulation](/sim/?preset=waveEquation), which has been set up for this tutorial. 1. Click on the screen to visualise a disturbance in the medium which will then propagate in all directions. 1. Now press {{ layout.pause }}, paint some initial data, and then press {{ layout.play }} to set it in motion. 1. Press {{ layout.erase }} to clear the screen. ### Playing with the diffusion coefficient, $D$ What does changing the diffusion coefficient, $D$, do? 1. Change its value by clicking {{ layout.equations }} → **Parameters** and editing the value of $D$: try increasing it by a factor of 10 or even 100. 1. Now click again on the screen and see how fast the disturbance spreads out throughout the domain. Explore how the speed depends on the diffusion coefficient. ## Numerical notes The VisualPDE solver only works for systems of first-order (in time) equations. So in fact what is being simulated is the system $$\\begin{aligned}\\pd{u}{t}&=v+CD\\nabla^2 u,\\\\ \\pd{v}{t} &= D \\nabla^2 u, \\end{aligned}$$ which becomes the wave equation when $C=0$. Note that the term in the second equation is a kind of *cross-diffusion*, with $u$ diffusing into $v$. The parameter $C$ is used to prevent spurious oscillations due to the equation being [hyperbolic](https://en.wikipedia.org/wiki/Hyperbolic_partial_differential_equation). Try varying the value of $C$ to observe how it changes the solution structure. ## Standing wave solutions If we take initial conditions of $$\\begin{aligned}u(x,y,0) &= \\cos\\left(\\frac{n \\pi x}{L_x}\\right)\\cos\\left(\\frac{m \\pi y}{L_y}\\right),\\\\ \\pd{u}{t}(x,y,0)&=0,\\end{aligned}$$ with Neumann boundary conditions, we can find a standing wave solution of the form $$ u(x,y,t) = \\cos\\left(D\\pi\\sqrt{\\frac{n^2}{L_x^2}+\\frac{m^2}{L_y^2}}\\,t\\right)\\cos\\left(\\frac{n \\pi x}{L_x}\\right)\\cos\\left(\\frac{m \\pi y}{L_y}\\right), $$ which oscillates in time and space. You can play with such an initial condition in this [initialised simulation](/sim/?preset=waveEquationICs), changing $n$ and $m$ in {{ layout.equations }} → **Parameters** and restarting the simulation by pressing {{ layout.erase }} to see how these parameters influence the solution. The damping factor $C$ is also set to zero in this case. If you increase its value, the solution amplitude will decay over time. If you change the boundary conditions to Dirichlet (and set $C=0.01$), the simulation will exhibit some fascinatingly symmetric oscillations. ## 1D and 2D waves In a 1D domain, [d'Alembert's solution](https://mathworld.wolfram.com/dAlembertsSolution.html) to the wave equation can be used to show that an initial disturbance in $u$ (and not $\\partial u/\\partial t$) will cause rightward and leftward moving waves. * See this in a [1D simulation](/sim/?preset=waveEquation1D). In principle the same concept works for higher dimensions, though reflections from boundary conditions can lead to more complicated behaviour, as seen in this [2D simulation](/sim/?preset=waveEquation3D) plotted as a surface. ","url":"/basic-pdes/wave-equation","tags":["linear","waves","hyperbolic"],"img":"/assets/images/waveEquation.webp","page_number":2,"id":12},{"layout":"page","title":"Dipoles in potential flow","lesson_number":30,"thumbnail":"/assets/images/dipole.webp","extract":"Playing with dipoles","equation":"$\\nabla^2 \\phi = f,$ $(u,v) = \\vnabla \\phi$","categories":["fluids","elliptic"],"body":"In many fields, singularity solutions are commonplace. In 2D potential flows, singularity solutions representing point forces, vortices, sources and sinks occur all the time, often as approximations of more complex flow features. A flow field might include any number of these added together, yielding an intricate flow field. But what happens if we bring two of these singularity solutions close together? This is an especially interesting question when they are equal and opposite, like a source and a sink or two opposing forces. # Deriving dipoles When we bring two opposites together, this is often called a [dipole](https://en.wikipedia.org/wiki/Dipole)[^1]. For instance, two forces make a *force dipole* and a source-sink pair make a *source dipole*. For instance, the equation for a potential $\\phi$ with a source-sink pair is $$\\nabla^2 \\phi = Q\\delta(x-d,y) - Q\\delta(x+d,y),$$ where $2d$ is their separation, $Q$ is their strength and $\\delta$ is the [Dirac delta function](https://en.wikipedia.org/wiki/Dirac_delta_function). This corresponds to a dipole if we take the limit as $d\\to0$ and $Q\\to\\infty$ as $dQ$ stays constant. If this feels like we're taking some sort of derivative, that's because we are! We'll leave the fine details for the textbooks and explore this through some simulations. We've set up a source in an [interactive simulation](/sim/?preset=potentialFlowDipoleClick). Try clicking to place down a sink and get a feel for the flow between them. To capture the limiting process of dipole formation more carefully, we've set up a simulation below for some value of $d$. Try varying this parameter using the slider to see how the flow field changes as we take the limit holding $dQ$ constant. For larger $d$, this gives you an idea of what real systems look like, where $d$ is not identically zero. You can also check out the [full-screen version](/sim/?preset=potentialFlowDipoleSlider) of this simulation to play more. ### Footnotes [^1]: Wikipedia talks about these in the context of electrostatics and magnetism, but the principle is the same for fluids.","url":"/fluids/dipoles","tags":["fluids","elliptic"],"img":"/assets/images/dipole.webp","page_number":30,"id":13},{"layout":"page","title":"Method of images","lesson_number":20,"thumbnail":"/assets/images/methodOfImages.webp","extract":"Boundaries in potential flow","equation":"$\\nabla^2 \\phi = 0,$ $(u,v) = \\vnabla \\phi$","categories":["fluids","elliptic"],"body":"When studying fluid flows, it is often easiest to consider unbounded domains. In real life, however, boundaries inevitably come into play and we have to enforce appropriate boundary conditions. Doing so can be tricky in general. For certain types of flows and certain boundary conditions, the titular [method of images](https://en.wikipedia.org/wiki/Method_of_images) allows to do this analytically. It is also used for studying electrostatics, whose governing equations resemble those of [potential flow](https://en.wikipedia.org/wiki/Potential_flow). # Equations of potential flow Potential flows in 2D with velocity field $(u,v)$ are governed by the Laplace equation $$\\nabla^2 \\phi = 0$$ for velocity potential $\\phi$, from which we define $u = \\pd{\\phi}{x}$ and $v=\\pd{\\phi}{y}$. We'll explore these flows in the half space $x>0$, applying a no-flux boundary condition $u=0$ on the boundary $x=0$. This common condition ensures that no fluid passes through the boundary. # Sources and symmetry Suppose we wanted to compute the flow due to a point source in the fluid in this domain, which amounts to solving the singulary forced Poisson equation $$\\nabla^2 \\phi = -\\delta(x-x_S,y-y_S)$$ in the half space $x>0$, with $\\phi_x=0$ on $x=0$. Here, $\\delta$ is the [Dirac delta function](https://en.wikipedia.org/wiki/Dirac_delta_function) and $(x_S,y_S)$ are the coordinates of the source. We've set up such a source in this [interactive simulation](/sim/?preset=potentialFlowHalfSpace), and drawn on the (currently fictitious) boundary in white. The method of images tells us that we can prevent flow through the boundary by including an additional source outside of the domain (i.e. in $x<0$). This is only possible because the equation for $\\phi$ is linear. - Try clicking to put down a source of equation strength. Can you find out where it should go? - Test your solution by switching to a true half space by toggling on a custom domain in {{ layout.settings }} → **Domain** How close can you get? # Numerical notes In these simulations, we're not actually solving the Poisson equation directly. Instead, we're solving a parabolic version that converges (in time) to a solution of the original equation. Thus, any time dependence that you see in these simulations is actually the solver converging to the true solution - we think this is pretty neat! ","url":"/fluids/method_of_images","tags":["fluids","elliptic"],"img":"/assets/images/methodOfImages.webp","page_number":20,"id":14},{"layout":"page","title":"Shallow water equations","lesson_number":4,"thumbnail":"/assets/images/shallow-water-waves.webp","extract":"Water waves and ripples","equation":"$\\pd{h}{t} = - \\vnabla \\cdot \\left( \\v{u} \\left(h+H_{e}\\right)\\right),$ $\\pd{\\v{u}}{t} = \\nu \\nabla^2 {\\v{u}} -g \\vnabla h - k {\\v{u}}-({\\v{u}}\\cdot \\vnabla){\\v{u}}-\\v{f}\\times \\v{u}$","categories":["fluids","waves","integrable","parabolic"],"body":"We consider a form of the [shallow water equations](https://en.wikipedia.org/wiki/Shallow_water_equations) given by $$\\begin{aligned} \\pd{h}{t} &= - \\left( \\pd{u}{x} + \\pd{v}{y}\\right) \\left(h+H_{e}\\right)-\\left( \\pd{h}{x} u+ \\pd{h}{y} v\\right)-\\varepsilon h\\\\ \\pd{u}{t} &= \\nu \\nabla^2 u -g \\pd{h}{x} - k u-u \\pd{u}{x}-v \\pd{u}{y}+f v\\\\ \\pd{v}{t} &= \\nu \\nabla^2 v -g \\pd{h}{y} - k v-u \\pd{v}{x}-v \\pd{v}{y}-f u \\end{aligned}$$ where $h$ is is the water height, $u$ and $v$ are the fluid velocities in $x$ and $y$ directions, and all of the parameters are as described in the article linked above except for $H_e$ replacing the mean height of the surface $H$, and the term involving $\\varepsilon$ representing a weak dissipation of the wave height $h$. The terms involving $k$ and $\\varepsilon$ lead to dissipation of the waves, and can be understood either as phenomenological drag coefficients, or derived from considering friction at the bottom surface or vertical diffusion of mass and momentum. * Load the interactive [shallow water equations model](/sim/?preset=ShallowWaterEqns). * Click to initiate a wave at a point on the surface, which will reflect off of the boundaries. A linearized version of this model underlies the Visual Story [Ripples on a Pond](/visual-stories/ripples). # The World Turning The simulation above sets $f=0$, representing no influence of the fluid from the [Coriolis force](https://en.wikipedia.org/wiki/Coriolis_force). This force accounts for inertia due to a rotating frame of reference such as in a spinning wave tank or in the Earth's oceans. We can get a sense for how this rotation inflences the fluid flow in a few different ways. * We first consider an initial condition of a sharp gradient in wave height $h$ in this [dam breaking model](/sim/?preset=ShallowWaterEqnsDamBreaking). Initially we have set $f=0$, but if you instead make it larger (e.g. $f=0.4$ or even $f=1$) and restart the simulation with {{ layout.erase }}, you can see that this force can stabilize the front of the wave after an initial transient. This is a counter-intuitive result indicating that different parts of the ocean can be deeper than others due to Coriolis forces. * If we instead set $f=1$, and plot the vorticity $\\omega=\\pd{v}{x}-\\pd{u}{y}$ in colour, we can simulate a [model with geostrophically balanced vortices](/sim/?preset=ShallowWaterEqnsVorticalSolitons). Clicking will place such a solution on the domain, which has a positive vorticity inside of it, indicating an anti-clockwise rotation. You can press for longer periods of time to make deeper vortices, and rotate the 3D solution around to see how these look like underneath the surface. # 1D Solitary Waves We can also study one-dimensional versions of this model to observe soliton-like traveling waves. This [nonlinear solitary wave model](/sim/?preset=1DShallowWaterEqns) can be compared to a [linearized solitary wave model](/sim/?preset=1DLinearizedShallowWaterEqns), showing qualitatively comparable behaviour but quantitative differences, particularly as the solutions evolve over time. The simulations on this page came out of discussions with [Matthew Crowe](https://mncrowe.github.io/), who generously provided feedback on constructing this page. ","url":"/fluids/shallow_water","tags":["fluids","waves","integrable","parabolic"],"img":"/assets/images/shallow-water-waves.webp","page_number":4,"id":15},{"layout":"page","title":"Turing instabilities are not enough","lesson_number":140,"thumbnail":"/assets/images/TuringNotEnough.webp","extract":"Beyond the limits of linear theory","categories":["biology","patterns","parabolic"],"body":"Linear stability theory is often used to predict regions of pattern-forming (or 'Turing') instabilities. However, in the presence of multiple homogeneous equilibria, these instabilities do not guarantee that a system develops a pattern. Here, we implement interactive versions of three local models in the paper \"[Turing instabilities are not enough to ensure pattern formation](https://arxiv.org/abs/2308.15311).\" In each case, the default is a 2D spatial domain with periodic boundary conditions. The boundary conditions can be modified by clicking {{ layout.equations }} → **Boundary conditions**, and the domain can be changed to a 1D interval by clicking {{ layout.settings }} → **Domain** and setting the dimension to be 1. By default, an initial small random perturbation of a homogeneous equilibrium is used to generate a Turing instability which eventually leads to the solution approaching a different homogeneous equilibrium. You can alternatively click to introduce a localised perturbation, or directly input a different initial condition. Importantly all parameters and functional forms can also be changed. Below we highlight specific parameters that give different dynamics. ### Reaction--diffusion system This [reaction--diffusion simulation](/sim/?preset=TuringNotEnoughRD) explores the system $$ \\begin{aligned} \\pd{u}{t}&=\\nabla^2 u+u-v-eu^3,\\\\ \\pd{v}{t}&=D\\nabla^2 v+ a v(v + c)(v - d) + b u - e v^3. \\end{aligned} $$ ### Keller--Segel chemotaxis This [Keller--Segel simulation](/sim/?preset=TuringNotEnoughKellerSegel) corresponds to the equations $$ \\begin{aligned}\\pd{u}{t} &= \\nabla^2 u - c\\vnabla \\cdot(u\\vnabla v) +u(b - u)(u - d),\\\\ \\pd{v}{t} &= D \\nabla^2 v + u-av. \\end{aligned} $$ Localised solutions can be found by setting $c=5$ and $d=0.1$. Reducing $d$ further to $0.01$ for this value of $c$ leads to spatiotemporal behaviour similar to using the purely logistic demographic term as in this [alternative model](/mathematical-biology/keller-segel). ### Biharmonic equation This [biharmonic simulation](/sim/?preset=TuringNotEnoughBiharmonic) corresponds to the equation $$ \\pd{u}{t} = - D\\nabla^2 u - \\nabla^4 u + au(c - u)(u - b). $$ Setting $D=1.87$ will instead lead to localised states that are near the boundary of stability. These will decay slowly for $D\\leq 1.85$ but appear to remain stable for $D=1.87$.","url":"/mathematical-biology/Turing-conditions-are-not-enough","tags":["biology","patterns","parabolic"],"equation":"","img":"/assets/images/TuringNotEnough.webp","page_number":140,"id":16},{"layout":"page","title":"Flowing bacteria","lesson_number":160,"thumbnail":"/assets/images/bacteriaInFlow.webp","extract":"A toy model of decay and advection in rivers","categories":["biology","parabolic"],"body":"Modelling the concentration of bacteria in a river is a complex, multifacted problem. This example lets us explore a toy model that manages to capture some of the key ideas by ignoring much of the real-world complexity. We limit ourselves to a single reach (i.e. a stretch of river without anything remarkable along it), and specify an inlet concentration of bacteria at the upstream (left) edge of the domain. Clicking in the simulation below will instantly add bacteria to any point in the river, which will then be carried downstream (right) by the flow. Bacteria decay over time at a constant rate, mimicking UV exposure (though this varies with the time and season in real life). We can adjust the inlet concentration, the decay rate of the bacteria, or the flow rate with the sliders below. Phrased mathematically, we are solving an advection–reaction equation for the concentration $C$ of bacteria, given by $$\\pd{C}{t}= - u\\pd{C}{x} - kC,$$ where $u$ is the flow speed, $k$ is the decay rate, and $x$ is the distance along the river. To play with the details of this model, try out the [full-screen simulation](/sim/?preset=bacteriaInAReach). In that simulation, sliders can be found by clicking {{ layout.equations }} → **Parameters** ","url":"/mathematical-biology/bacteria-in-flow","tags":["biology","parabolic"],"equation":"","img":"/assets/images/bacteriaInFlow.webp","page_number":160,"id":17},{"layout":"page","title":"Bistability: invasion and persistence","lesson_number":30,"thumbnail":"/assets/images/bistableTravellingWaves.webp","extract":"Spatial Allee effects and changing wavespeeds","equation":"$\\pd{u}{t}=D\\nabla^2 u +u(u-a)(1-u)$","categories":["biology","waves","parabolic"],"body":"Next we'll consider a bistable reaction--diffusion equation, sometimes referred to as the [Allen--Cahn](https://people.maths.ox.ac.uk/trefethen/pdectb/allen2.pdf) or Chaffee--Infante equation, $$\\pd{u}{t}=D\\nabla^2u +u(u-a)(1-u),$$ where $a \\in (0,1)$ is a parameter. As with the [Fisher–KPP equation](travelling-wave), this system will admit travelling waves. Here however, one can show that the wavespeed is proportional to $$ c \\propto \\int_0^1 u(u-a)(1-u)\\, \\d u = \\frac{1-2a}{12} $$ and, hence, we expect the waves to change their direction of travel when $a$ crosses the value 0.5. * Load the [travelling wave simulation](/sim/?preset=bistableTravellingWave). * Click within the box to visualise a 'line' of a population, which will then spread out as a planar wave. * The value $a=0.5$ is the threshold between expanding and contracting waves (positive or negative $c$ values). Take values of $a=0.4$, $a=0.6$, and $a=0.5$ to see how this influences the propogation of this wave. * You can change the brush to form circular regions (or input directly initial conditions) to see how other geometries of spreading waves are affected by parameter variations in this bistable system. # Spatial Allee effects In the above simulations, we considered $a$ near the boundary, and initial waves that had sufficient size. Biologically we are often interested in the question of small invading populations, which becomes complex when both extinction ($u=0$) and persistence ($u=1$) are possible. We'll set $a=0.4$ so that in principle a wave of population can invade the domain, but consider only small initial regions where $u=1$. * Load the interactive [Allee simulation](/sim/?preset=bistableSurvival). * Click within the domain to set the value of $u$ to 1 in some small region. You should notice that the initial population dies out quickly despite $u=1$ being locally stable. Diffusion is spreading the population too quickly. * The parameter $R$ determines the size of the initial population. Increasing it slightly (e.g. setting $R=6.5$), allows the initial population to grow and overcome this diffusion-induced decay. * Alternatively, for smaller values of $R$, try pausing the simulation {{ layout.pause }}, painting a larger initial region of $u=1$, and then pressing {{ layout.play }} to set it in motion. You will notice that, for sufficiently large initial regions, the steady state $u=1$ can invade the steady state $u=0$. The precise quantities and geometry of these initial conditions can influence persistence. It is difficult to analytically determine conditions for when an invasion is successful or not, as it can depend on both the size and shape of the initial perturbation, as well as the parameters $a$ and $D$. You can explore different values of these parameters and how they influence the success or failure of a population to persist in a new environment. # Advection and spatial Allee effects We can add an advection term to the equation to model movement due to, for example, putting our population in a flowing body of water. The equation now looks like: $$\\pd{u}{t}=D\\nabla^2u +u(u-a)(1-u)+V(\\cos(\\theta)u_x + \\sin(\\theta)u_y),$$ where $V$ is a velocity and $\\theta$ is a direction of advection. We implement this in this [advective bistable simulation](/sim/?preset=BistableAdvection), starting near the critical Allee threshold with $a=0.48$. It can be an interesting task to paint an initial condition capable of surviving so close to this boundary to extinction. ","url":"/mathematical-biology/bistable-travelling-waves","tags":["biology","waves","parabolic"],"img":"/assets/images/bistableTravellingWaves.webp","page_number":30,"id":18},{"layout":"page","title":"Brusselator pattern formation","lesson_number":60,"thumbnail":"/assets/images/Brusselator.webp","extract":"Turing instability regions","equation":"$\\pd{u}{t}=\\nabla^2 u+a-(b+1)u+u^2v,$ $\\pd{v}{t}=D\\nabla^2v+ bu-u^2v$","categories":["biology","patterns","parabolic"],"body":"Another [Turing](https://en.wikipedia.org/wiki/Turing_pattern) system is the [Brusselator](https://en.wikipedia.org/wiki/Brusselator), given by $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ bu-u^2v,\\end{aligned}$$ where we take $a,b>0$. * Load the [interactive simulation](/sim/?preset=brusselator). * You can change the diffusion coefficients to effectively change the size of the domain (the diffusion coefficients will scale like $1/L^2$ where $L$ is the domain size, so decreasing both of these numbers by a factor of 100 will effectively simulate a domain 10 times larger). As the patterns have approximately fixed wavelengths, this should lead to a different number of pattern elements. * The homogeneous equilibrium is stable for $b-1a^2/(\\sqrt{b}-1)^2$. You can check this condition for the parameters $a=2$, $b=3$, for which the instability threshold is $D_c = a^2/(\\sqrt{b}-1)^2 \\approx 7.4641$. So we expect patterns for $D=8$, and we expect the system to return to the homogeneous steady state for $D=7$. # Hyperbolic Brusselator & Turing–Wave instabilities One can show that two–species reaction–diffusion systems can only ever have Turing–like instabilities with real growth rates. In contrast, hyperbolic reaction–diffusion systems (or systems with more than two species) allow for Turing–Wave (or sometimes Wave or Turing–Hopf) instabilities. Such instabilities lead to spatial eigenfunctions that grow and oscillate, typically giving rise to spatiotemporal dynamics. Here we consider a hyperbolic version of the Brusselator given by $$\\begin{aligned}\\tau\\pdd{u}{t}+\\pd{u}{t}&=D\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\tau\\pdd{v}{t}+\\pd{v}{t}&=\\nabla^2v+ bu-u^2v,\\end{aligned}$$ where there are two new terms proportional to $\\tau$ and we have instead put the diffusion ratio $D$ on the $u$ equation. The normal Turing instabilities will occur for $D<1$, but new Turing–Wave instabilities may occur for $D>1$, so we set $D=2$. * In a [one-dimensional simulation](/sim/?preset=BrusselatorTuringWave1D), an initial cosine perturbation on a small domain leads to an oscillating cosine, which is what linear theory would predict. The system loses this instability as $\\tau$ is decreased to $0.1$ or below, with a decaying oscillation amplitude for intermediate values. * On a larger domain, a [two-dimensional simulation](/sim/?preset=BrusselatorTuringWave2D) exhibits a variety of transient dynamics depending on exactly how the uniform equilibrium is perturbed, culminating in `wave–like' spatiotemporal behaviour. Again decreasing $\\tau$ or increasing $D$ will reduce the effect of the instability, decreasing the amplitude of the solution. For more details on such systems and their generalisations, [take a look at this paper](https://arxiv.org/abs/2204.13820). ","url":"/mathematical-biology/brusselator","tags":["biology","patterns","parabolic"],"img":"/assets/images/Brusselator.webp","page_number":60,"id":19},{"layout":"page","title":"Reaction–cross-diffusion systems","lesson_number":100,"thumbnail":"/assets/images/dark-soliton.webp","extract":"Dark solitons and extended Turing spaces","equation":"$\\pd{u}{t}=\\vnabla\\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v)+a-u+u^2v,$ $\\pd{v}{t}=\\vnabla\\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v)+b-u^2v$","categories":["biology","patterns","parabolic"],"body":"We now consider an example of a cross-diffusion system based on the following reaction kinetics: $$\\begin{aligned}\\pd{u}{t}&=\\vnabla\\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v)+a-u+u^2v,\\\\ \\pd{v}{t}&=\\vnabla\\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v)+b-u^2v,\\end{aligned}$$ which is a cross-diffusion version of the [Schnakenberg model](/mathematical-biology/schnakenberg). * Load the [interactive simulation](/sim/?preset=crossDiffusionSchnakenberg) * The default parameters create localised inverted spots (sometimes called 'dark solitons') wherever the perturbation is, but these do not seem to propagate patterns in any direction. * Setting the value of $b=1$ gives pattern formation closer to the Schnakenberg system observed before, though note that the self-diffusion terms are equal. * Finally taking $b=0.1$ allows for spatiotemporal behaviors, as the homogeneous equilibrium is then well into a Hopf regime. ","url":"/mathematical-biology/cross-diffusion","tags":["biology","patterns","parabolic"],"img":"/assets/images/dark-soliton.webp","page_number":100,"id":20},{"layout":"page","title":"Cyclic competition models","lesson_number":110,"thumbnail":"/assets/images/rock-paper-scissors.webp","extract":"Rock, paper, scissors – spiral waves!","equation":"$\\pd{u}{t}=D_u\\nabla^2 u+u(1-u-av-bw)$ $\\pd{v}{t}=D_v\\nabla^2 v+v(1-bu-v-aw)$ $\\pd{w}{t}=D_w\\nabla^2 w+w(1-au-bv-w)$","categories":["biology","waves","chaos","parabolic"],"body":"We now consider an example of a reaction-diffusion system based on the following reaction kinetics: $$\\begin{aligned}\\pd{u}{t}&=D_u\\nabla^2 u+u(1-u-av-bw),\\\\ \\pd{v}{t}&=D_v\\nabla^2 v+v(1-bu-v-aw),\\\\ \\pd{w}{t}&=D_w\\nabla^2 w+w(1-au-bv-w).\\end{aligned}$$ These are an example of a [generalised Lotka–Volterra](https://stefanoallesina.github.io/Sao_Paulo_School/intro.html) system. If we set $a < 1 < b$, then each population outcompetes another, and hence their relative fitness forms a cycle. This kind of model is also known as a spatial rock-paper-scissors game. To make things more interesting, we will allow the species to diffuse at different rates. * Load the [interactive simulation](/sim/?preset=cyclicCompetition) * This begins with an initially structured population that eventually devolves into a complex spatiotemporal motion, with spiral waves a dominant feature. * This system exhibits a wide range of behaviours. One of the most interesting is that if you allow spiral waves to form, and then set all diffusion coefficients to be equal (e.g. by changing $D_u$ to $0.5$), the system will still admit spiral waves despite not having a Turing-like instability. ","url":"/mathematical-biology/cyclic-competition","tags":["biology","waves","chaos","parabolic"],"img":"/assets/images/rock-paper-scissors.webp","page_number":110,"id":21},{"layout":"page","title":"FitzHugh–Nagumo and excitability","lesson_number":80,"thumbnail":"/assets/images/FitzHugh-Nagumo.webp","extract":"Patterns, spiral waves, and chaos","equation":"$\\pd{u}{t}=\\nabla^2 u +u-u^3-v,$ $\\pd{v}{t}=D\\nabla^2v+ \\varepsilon_v(u-a_v v-a_z)$","categories":["biology","patterns","parabolic"],"body":"Here we look at the [FitzHugh–Nagumo model](https://en.wikipedia.org/wiki/FitzHugh%E2%80%93Nagumo_model), given by $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u +u-u^3-v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ \\varepsilon_v(u-a_v v-a_z),\\end{aligned}$$ where we take $D>1$. * Load the [FitzHugh–Nagumo simulation](/sim/?preset=FitzHugh-Nagumo) * Click in the domain to initiate a pattern-forming instability, which will form roughly concentric rings as it expands. * This system has many different kinds of solutions which are stable over long time periods. To see this, change the initial condition, under {{ layout.equations }} → **Initial conditions** so that $u\\|_{t=0}$ has the value '**RAND**'. Then press {{ layout.restart }} to restart the simulation. It should now exhibit patterns which are much more spot-like. # Turing–Hopf bifurcations We now vary the parameters from the previous simulation so that it supports both pattern formation, but also oscillations. These oscillations come from steady states undergoing [Hopf bifurcations](https://en.wikipedia.org/wiki/Hopf_bifurcation). In such regimes, one can often find a range of complex spatial, temporal, and spatiotemporal behaviours, many of which can be simultaneously stable for different initial conditions. To illustrate this, we consider the initial conditions $$ u(x,y,0) = \\cos\\left(\\frac{m \\pi x}{L}\\right)\\cos\\left(\\frac{m \\pi y}{L}\\right), \\quad v(x,y,0)=0, $$ for some integer $m$ and domain length $L=280$. * Load the [Turing-Hopf simulation](/sim/?preset=FitzHugh-Nagumo-Hopf) * This simulation can display long-time solutions that exhibit all three kinds of behaviour, depending on the values of $m$, $D$, and the other parameters. Try $m=4$, $m=3$ and $m=6$ for example. # Three-species variant A three-species variant of the FitzHugh–Nagumo model is $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u +u-u^3-v,\\\\ \\pd{v}{t}&=D_v\\nabla^2v+ \\varepsilon_v(u-a_v v-a_w w-a_z),\\\\ \\pd{w}{t}&=D_w\\nabla^2w+ \\varepsilon_w(u-w).\\end{aligned}$$ * Load the [three-species simulation](/sim/?preset=FitzHugh-Nagumo-3) * The simulation demonstrates the dynamics of this system in a regime which has both homogeneous limit cycles and pattern formation competing against one another. * The initial pattern formed in this simulation will eventually be destroyed by the oscillations. You can increase the value of $a_v$ to stabilise the pattern for longer, and if $a_v \\geq 0.3$, the pattern will eventually overtake the oscillations and fill the entire domain. ","url":"/mathematical-biology/fitzhugh-nagumo","tags":["biology","patterns","parabolic"],"img":"/assets/images/FitzHugh-Nagumo.webp","page_number":80,"id":22},{"layout":"page","title":"Gierer–Meinhardt pattern formation","lesson_number":70,"thumbnail":"/assets/images/GiererMeinhardt.webp","extract":"Spots and stripes","equation":"$\\pd{u}{t}=\\nabla^2 u+a+\\frac{u^2}{v}-bu,$ $\\pd{v}{t}=D\\nabla^2v+ u^2-cv$","categories":["biology","patterns","parabolic"],"body":"Another [Turing](https://en.wikipedia.org/wiki/Turing_pattern) system is the [Gierer–Meinhardt model](https://www.scholarpedia.org/article/Gierer-Meinhardt_model), given by $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+\\frac{u^2}{v}-bu,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$ where we take $a,b,c>0$ and $D>1$. * Load the [interactive simulation](/sim/?preset=GiererMeinhardt) * Changing any of the parameters can lead to different solutions, though this system generically favours spot-like patterns. Note that the colour scale here is fixed, but that changing parameters will lead to solutions with different maxima and minima, so using the auto-snap feature under {{ layout.settings }} → **Colour** → **Auto snap** may be advised. # Stripes stability We can observe the instability of stripe patterns in this model by choosing initial conditions which become stripes along one direction. We set $$ u(0,x,y) = 1+\\cos\\left(\\frac{n\\pi x}{L}\\right), \\quad v(0,x,y) = 1, $$ with $n$ an integer. * Load the [simulation](/sim/?preset=GiererMeinhardtStripeICs) * Change the value of $n$ and restart the simulation by pressing {{ layout.erase }}. In each case a different number of initial stripes will evolve into some number of stripes, but they should persist indefinitely. * Now click on or near a stripe to destabilise it into spots. Note that the brush value, found in {{ layout.settings }} → **Brush** is set to $1.01u$, so that it is a relatively small perturbation of the current solution. # Saturation leads to stripes A common way to obtain stripe-like patterns in this model is to consider saturation of the self-activation term ($u^2/v$ in the equation above). In this case we have the model $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+\\frac{u^2}{v(1+Ku^2)}-bu,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$ where $K>0$ is a saturation constant. For very large values of $K$, the system will not admit Turing patterns, and for very small values it will behave as in the above spot-forming model. However, for intermediate values of $K$ one can get labyrinthine patterns. * Observe the patterns in this [stripey simulation](/sim/?preset=GiererMeinhardtStripes) * Try increasing or decreasing the size of $K$ to observe how this influences spot/stripe selection in the system. Note that the colour scale is changing to match solution maxima and minima. ","url":"/mathematical-biology/gierer-meinhardt","tags":["biology","patterns","parabolic"],"img":"/assets/images/GiererMeinhardt.webp","page_number":70,"id":23},{"layout":"page","title":"Survival in a harsh environment","lesson_number":20,"thumbnail":"/assets/images/harsh-environment.webp","extract":"Impacts of boundary conditions on survival","equation":"$\\pd{u}{t}=\\nabla^2 u+u\\left(1-\\frac{u}{K}\\right)$with no-flux boundary conditions","categories":["biology","parabolic"],"body":"We'll continue studying the logistic reaction-diffusion model, $$\\pd{u}{t}=D\\nabla^2 u+u\\left(1-\\frac{u}{K}\\right),$$ but now we consider different boundary conditions. * Load the [interactive simulation](/sim/?preset=harshEnvironment). The initial conditions leads to population growth in select areas of the domain, which eventually reach a large density and begin spreading. As the system initially has no-flux boundary conditions, the population will reach carrying capacity everywhere. * Now change the boundary conditions to \"Dirichlet\", taking the constant value to be $0$. This will affect the solution near the domain edges, but not the interior, as the diffusion is small. * Now increase the diffusion coefficient by deleting zeroes from the value of $D$. This will increase the region over which the boundary conditions affect the structure of the solution. * One can show that the positive equilibrium exists and is globally stable if and only if $$ D < \\frac{L^2}{2\\pi^2} \\approx 5.066, $$ as $L=10$ in our simulation. For diffusion coefficients larger than this value, the extinction equilibrium, $u=0$, is stable. Try simulating the system at $D=4$, and $D=6$, clicking if needed to introduce some additional population into the domain. **Note**: You can check the condition more precisely by looking at $D$ values closer to the boundary, but the timescale to reach equilibrium will be long, and the amplitude of $u$ will become very small. * The analytical condition above does not depend on the carrying capacity $K$. Set $K=1000$, and simulate the system at $D=4$ and $D=6$ in this case to confirm that $K$ will not change the boundary of where the populations persists, though it will change the structure of the solution when $u>0$. Again you may need to click to introduce some population into the domain. With this value of $K$, it is easier to see the solution's behaviour near the critical diffusion threshold. The values $D=5$ and $D=5.2$ are good choices, for example. ","url":"/mathematical-biology/harsh-environment","tags":["biology","parabolic"],"img":"/assets/images/harsh-environment.webp","page_number":20,"id":24},{"layout":"page","title":"Heterogeneous reaction-diffusion systems","lesson_number":120,"thumbnail":"/assets/images/heterogeneousGiererMeinhardt.webp","extract":"Isolated patterns and moving spikes","equation":"$\\pd{u}{t}=\\nabla^2 u+a+G(x)+\\frac{u^2}{v}-[b+H(x)]u,$ $\\pd{v}{t}=D\\nabla^2v+ u^2-cv$","categories":["biology","patterns","parabolic"],"body":"This is a brief example of messy boundary conditions and spatial heterogeneity inducing complex dynamical behaviours. We consider a heterogeneous version of the [Gierer–Meinhardt](/mathematical-biology/gierer-meinhardt) model: $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a+G(x)+\\frac{u^2}{v}-[b+H(x)]u,\\\\ \\pd{v}{t}&=D\\nabla^2v+ u^2-cv,\\end{aligned}$$ where we will vary the domain and boundary conditions, as well as the functions $G,H$, in the examples below. * Load the [Gierer–Meinhardt simulation](/sim/?preset=GMHeterogeneous2D) * The simulation starts by taking homogeneous Dirichlet boundary conditions for $u$, and homogeneous Neumann boundary conditions for $v$. Despite an initially uniform solution, these boundary conditions are sufficient to perturb the equilibrium to form a patterned state. * This simulation sets $G = Ax/L$ and $H = Bx/L$, so that taking nonzero values of $A$ and $B$ will lead to spatially heterogeneous forcing. Try setting $A=-1$ or $B=5$ to observe how this leads to size and wavelength differences across the domain. * With nonzero values of $A$ or $B$, restarting the simulation by pressing {{ layout.erase }} can lead to transient local oscillations and somewhat different selection of where spots will appear. # 1D bifurcations These systems are simpler to understand in 1D spatial domains, where we can isolate some aspects of their behaviour analytically. In particular, it is known that spike solutions in 1D can move along gradients in spatial heterogeneity, and that this can induce instabilities leading to periodic spike patterns which we now explore. * First consider this [1D simulation](/sim/?preset=GMHeterogeneousOscillationsMixedBCs) using the same mixed boundary conditions above, with $G=0$ and $H=Bx/L$. Spikes form across the domain at different amplitudes. The rightmost one undergoes a Hopf instability leading to oscillations in its amplitude, which eventually die out as it moves to the left. Eventually the leftmost spike becomes unstable, making room for the others to move further left. This eventually leads to enough room at the right for a new spike to emerge, which again undergoes a brief oscillatory period before settling down. This behaviour repeats indefinitely. The oscillations at the right, and the boundary spike on the left which does not move, are not terribly relevant for the movement or creation/anhillation of spikes. These are just artifacts of our particular choice of heterogeneity and kinetics. We can get rid of these artifacts in the following way. We use Dirichlet conditions to introduce a flux of the inhibitor $v$ at the boundaries to dampen these spike oscillations and remove the leftmost boundary spike. * We set $v=2$ at the boundaries (retaining the $u=0$ condition from the previous simulation) in this [modified simulation](/sim/?preset=GMHeterogeneousOscillationsDirichletBCs). This more clearly localises the spike movement dynamics. If you change the value of $v$ at the boundaries from 2 to 1, you can observe the boundary spikes from the previous simulation returning (though reducing it much below 1 can lead to numerical issues due to the dependence of the equation for $\\pd{u}{t}$ on $1/v$). ","url":"/mathematical-biology/heterogeneous-dynamics","tags":["biology","patterns","parabolic"],"img":"/assets/images/heterogeneousGiererMeinhardt.webp","page_number":120,"id":25},{"layout":"page","title":"Keller–Segel chemotaxis","lesson_number":90,"thumbnail":"/assets/images/KellerSegel.webp","extract":"Slime moulds and cell movement","equation":"$\\pd{u}{t}=\\nabla^2 u-\\vnabla \\cdot(\\chi(u)\\vnabla v)+f_u(u),$ $\\pd{v}{t}=D\\nabla^2v+ f_v(u,v)$","categories":["biology","patterns","chaos","parabolic"],"body":"We now consider [Keller–Segel models of chemotaxis](https://en.wikipedia.org/wiki/Chemotaxis#Mathematical_models) of the form $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u-\\vnabla \\cdot(\\chi(u)\\vnabla v)+f_u(u),\\\\ \\pd{v}{t}&=D\\nabla^2v+ f_v(u,v),\\end{aligned}$$ where we take $$\\begin{aligned}\\chi&=\\displaystyle\\frac{cu}{1+u^2},\\\\f_u(u)&=u(1-u),\\\\f_v(u,v) &= u-av.\\end{aligned}$$ * Load the [interactive simulation](/sim/?preset=KellerSegel) * The initial condition condition is a small random initial population, which eventually grows towards the homogeneous equilibrium of $u=1$, $v=1/a$, but will undergo pattern formation as it nears this equilibrium. * Try changing the values of $D$, $c$, and $a$ and then pressing {{ layout.restart }} to restart the simulation. Importantly, this system will have some hysteresis in that patterns may appear differently depending on where they evolved from, and when you change the parameters (for example, if you restart the simulation or just change the parameters and let it evolve from one state to another). The colour bars are fixed so that taking $c=10$ leads to patterns which saturate the colour scale. * Linear instability analysis predicts a pattern-forming instability for parameters satisfying $$2\\sqrt{aD} < \\frac{c}{2}-D-a.$$ Test this inequality by varying parameters (for example, around $c = 3.3$ to $c=3.6$), leaving the other parameters as they are. ","url":"/mathematical-biology/keller-segel","tags":["biology","patterns","chaos","parabolic"],"img":"/assets/images/KellerSegel.webp","page_number":90,"id":26},{"layout":"page","title":"Schnakenberg pattern formation","lesson_number":50,"thumbnail":"/assets/images/Schnakenberg.webp","extract":"Spots and stripes","equation":"$\\pd{u}{t}=\\nabla^2 u+a-u+u^2v,$ $\\pd{v}{t}=D\\nabla^2v+ b-u^2v$","categories":["biology","patterns","parabolic"],"body":"Next we'll consider a classical reaction–diffusion system which forms [Turing patterns](https://en.wikipedia.org/wiki/Turing_pattern), $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+a-u+u^2v,\\\\ \\pd{v}{t}&=D\\nabla^2v+ b-u^2v,\\end{aligned}$$ where we need $D>1$ to form patterns, and typically take $a,b>0$. * Load the [Schnakenberg simulation](/sim/?preset=Schnakenberg) * Click within the box to visualise a pulse of a population, which will then spread out as a planar wave leaving patterns behind it. * You can change the diffusion coefficients to effectively change the size of the domain (the diffusion coefficients will scale like $1/L^2$ where $L$ is the domain size, so decreasing both diffusion coefficients by $100$ will effectively simulate a domain $10$ times larger). As the patterns have approximately fixed wavelengths, this should lead to a different number of pattern elements. * With $D=100$, the system forms spot-like patterns. If you reduce to $D=30$, instead stripe-like patterns will be formed. * The homogeneous equilibrium can undergo Hopf bifurcations for small values of $1 > b > a \\geq 0$. In this regime, one can find Turing patterns, homogeneous oscillations, and complex spatiotemporal interactions of Turing and Hopf instabilities. One example is this [interactive simulation](/sim/?preset=SchnakenbergHopf), but you can find others by tweaking the parameters. * Check out this [growing simulation](/sim/?preset=SchnakenbergGrowingDisk) for a crude implementation of the Schnakenberg system on a growing domain with Dirichlet boundary conditions. ","url":"/mathematical-biology/schnakenberg","tags":["biology","patterns","parabolic"],"img":"/assets/images/Schnakenberg.webp","page_number":50,"id":27},{"layout":"page","title":"Hills and valleys","lesson_number":150,"thumbnail":"/assets/images/SpringOnTopography.webp","extract":"Effects of topography on models of water and vegetation","categories":["biology","patterns","waves","parabolic"],"body":"Many of the spatial models that people study assume flat, homogeneous domains. In this example, we'll numerically explore what happens if we replace flatness with all of real life's roughness. # Hillside vegetation In our [page on vegetation patterns](/mathematical-biology/vegetation-patterns), we explore the [Klausmeier model](https://www.science.org/doi/full/10.1126/science.284.5421.1826), which can be stated as $$\\begin{aligned}\\pd{w}{t} &= a-w -wn^2+v\\pd{w}{x} + \\nabla^2w,\\\\ \\pd{n}{t} &= wn^2 - mn + \\nabla^2n,\\end{aligned}$$ when written in terms of water $w$ and plant biomass $m$. There are many extensions of this model to include varying, real-world topography, some of which are neatly summarised in [a 2018 paper](https://royalsocietypublishing.org/doi/10.1098/rsif.2018.0508). We'll use the simplest possible model, which modifies the original to become $$\\begin{aligned}\\pd{w}{t} &= a-w -wn^2+ D\\nabla^2w + V\\vnabla \\cdot (w\\vnabla T),\\\\ \\pd{n}{t} &= wn^2 - mn + \\nabla^2n,\\end{aligned}$$ where $T(x,y)$ is the spatially varying height of the landscape. The parameters $D$ and $V$ capture the relative sizes of the water transport terms. * Load this [Klausmeier simulation](/sim/?preset=KlausmeierOnTopography), which implements the modified PDE for a given $T(x,y)$. Watch the vegetation invade into water-rich regions in the valleys, and seemingly travel uphill following rainfall, which then get used up and dry out. * Try varying the parameters $a$ and $m$ to see how they impact the structure of patterns. * What effect does reducing $V$ have on the patterns formed? Do they resemble those in our [flat-domain example](/mathematical-biology/vegetation-patterns)? # Rainfall on the hilltops Let's take a more detailed look at water. We could adapt the [shallow water equations](https://en.m.wikipedia.org/wiki/Shallow_water_equations) that we used in our [Visual Story on waves](/visual-stories/ripples), but instead we'll use a simpler model that's really more suited to glaciers and lava than water. For water of height $h(x,y,t)$ above topography of height $T(x,y)$, this model of gravity-driven flow over terrain reduces to the scalar PDE $$\\pd{h}{t}=D\\vnabla \\cdot(h^3\\vnabla(h+T)),$$ where $D$ represents the relative strength of gravity to the stickiness of the fluid. This equation (with some helpful [numerical tricks](https://en.wikipedia.org/wiki/Flux_limiter)) is encoded in an [rainfall simulation](/sim/?preset=WaterOnTopography) that lets us click to introduce water to the rolling landscape. * Try clicking to introduce spots of water and watch as they flow down into the valleys. * Make it rain by dragging over the terrain, gradually filling up the riverbed. * Try modifying the equation for $h$ by including a constant rainfall (0.001 should be enough) and see the landscape slowly fill. * We've picked an example of real-world topography for you to explore, but you can swap this out for your local area by swapping out the topographical map found by clicking {{ layout.settings }} → **Images**. # Springing to life Of course, rivers aren't only filled by rain. Let's see what happens if we introduce a spring to the hillside. This [spring simulation](/sim/?preset=WaterOnTopographySpring) captures the same river system as before, but now with a spring emerging from one of the hilltops. * Watch as the spring spreads down the hillside and gradually fills up the large riverbed. * Try speeding up the process by clicking to add in additional springs. Looking for high-resolution versions of these simulations? Try out: * [high-resolution rain](/sim/?preset=WaterOnTopographyHighres) * [high-resolution spring](/sim/?preset=WaterOnTopographySpringHighres) These simulations might stretch your device to its limits! ","url":"/mathematical-biology/topography","tags":["biology","patterns","waves","parabolic"],"equation":"","img":"/assets/images/SpringOnTopography.webp","page_number":150,"id":28},{"layout":"page","title":"Logistic travelling waves","lesson_number":10,"thumbnail":"/assets/images/travelling-waves.webp","extract":"Classic models of invasion","equation":"$\\pd{u}{t}=\\nabla^2 u+ru\\left(1-\\frac{u}{K}\\right)$with periodic boundary conditions","categories":["biology","waves","parabolic"],"body":"Here we'll consider a classical reaction–diffusion equation, with a logistic nonlinearity. This is often referred to as the [Fisher–KPP equation](https://en.wikipedia.org/wiki/Fisher%27s_equation), $$\\pd{u}{t}=\\nabla^2 u+ru\\left(1-\\frac{u}{K}\\right),$$ with periodic boundary conditions. 1. Load the [interactive simulation](/sim/?preset=travellingWave). 1. Click within the box to visualise a 'line' of a population, which will then spread out as a planar wave. 1. Explore different parameters in this model, namely $D$, $r$, and $K$. 1. Does the wave speed, $c$, approximately follow the scaling law derived via linearisation of the wavefront (that is, $c \\propto \\sqrt{rD}$)? One interesting experiment to try is to see what happens if you simultaneously decrease $r$ and increase $D$ (or vice versa). This should have (approximately) the same effective wave speed, but the profile will be different as you have effectively changed the time and space scales in opposite directions. 1. Does the value of the carrying capacity, $K$, matter for the speed of the wave? Or the profile? 1. Next change the brush type to a circle and explore how circular waves travel. These are similar to the planar (effectively 1D) waves above, but their speed will be slightly different as the curvature of these wave fronts will influence their speed. 1. You can also explore this kind of wave in a [1D model](/sim/?preset=travellingWave1D). You can press {{ layout.erase }} to reset the simulation as you change parameters. # Competitive exclusion Travelling waves also occur in multispecies models. A model of two competing populations (red and grey squirrels) can be written as, $$\\begin{aligned}\\pd{R}{t}&=D\\nabla^2 R+R(1-c_{RR}R-c_{RG}G),\\\\ \\pd{G}{t}&=D\\nabla^2 G+ G(1-c_{GR}R-c_{GG}G),\\end{aligned}$$ where $D$ is a diffusion coefficient, $c_{RG}, c_{GR}$ are [interspecific](https://en.wikipedia.org/wiki/Interspecific_competition), and $c_{RR},c_{GG}$ are [intraspecific](https://en.wikipedia.org/wiki/Intraspecific_competition) competition coefficients. [Competitive exclusion](https://en.wikipedia.org/wiki/Competitive_exclusion_principle) can lead to one of the species being driven to extinction by the other. * This [squirrel simulation](/sim/?preset=RedGreyInvasionUK) explores the grey squirrels driving the red to extinction across a map of the United Kingdom. # Epidemic waves As another example of logistic travelling waves, we can consider the [SIS model](https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#Variations_on_the_basic_SIR_model) of infection given by $$\\begin{aligned}\\diff{S}{t}&=d I - b S I,\\\\ \\diff{I}{t}&=b S I - d I,\\end{aligned}$$ where $S$ is the number of susceptible individuals, $I$ the number of infected individuals, $d$ a recovery rate, and $b$ an infection rate. Since this system is mass conserving (that is, $N=S + I$ must be a constant), we can rewrite this model purely in terms of the proportion of infected individuals $p = I/N$ to get $$\\pd{p}{t}=\\nabla^2 p+\\beta p(1-p)-\\delta p,$$ where we have rescaled the infection and recovery rates and added a diffusion term to model spatial movement of infected individuals. As long as $R_0 = \\beta/\\delta > 1$, this model will have the same travelling-wave behaviour as the Fisher–KPP equation above, where $p=0$ is an unstable steady state, and $p=(\\beta - \\delta)/\\beta$ is a stable endemic equilibrium. * Visualise an epidemiological [travelling wave across the USA](/sim/?preset=SpanishFluWave) to see how this plays out in time and space. ","url":"/mathematical-biology/travelling-wave","tags":["biology","waves","parabolic"],"img":"/assets/images/travelling-waves.webp","page_number":10,"id":29},{"layout":"page","title":"Vegetation patterns","lesson_number":130,"thumbnail":"/assets/images/VegetationPatterns.webp","extract":"Vegetation moving towards water","equation":"$\\pd{w}{t} = a-w -wn^2+v\\pd{w}{x} + \\nabla^2w,$ $\\pd{n}{t} = wn^2 - mn + \\nabla^2n$","categories":["biology","patterns","waves","parabolic"],"body":"Here we look at a model of vegetation patterning known as the [Klausmeier model](https://www.science.org/doi/full/10.1126/science.284.5421.1826), written in terms of water $w$ and plant biomass $n$. $$\\begin{aligned}\\pd{w}{t} &= a-w -wn^2+v\\pd{w}{x} + \\nabla^2w,\\\\ \\pd{n}{t} &= wn^2 - mn + \\nabla^2n\\end{aligned}$$ * Load the [interactive simulation](/sim/?preset=KlausmeierModel). Note that this model always has a plant-extinction state being stable. * The simulation starts in a parameter regime where pure stripes (regular patterns) of plants are favoured over time. If you instead set $a=0.4$, $m=0.4$, the environment will be much harsher, leading to less regular patterns. However, this also makes the extinction state more stable, so you may have to brush sufficient initial data to overcome this Allee-like effect. # Localised solutions Similarly to the [localised patterns in Swift–Hohenberg](/nonlinear-physics/swift-hohenberg), Dan Hill has provided examples of dihedrally symmetric localised patterns in this model. You can find initial conditions that simulate such patterns in this [localised simulation](/sim/?preset=LocalisedVegetation), and more information about the rigorous theory underlying them in [his 2024 paper](https://doi.org/10.1007/s00332-024-10046-2). ","url":"/mathematical-biology/vegetation-patterns","tags":["biology","patterns","waves","parabolic"],"img":"/assets/images/VegetationPatterns.webp","page_number":130,"id":30},{"layout":"page","title":"Pattern formation & advection","lesson_number":70,"thumbnail":"/assets/images/GrayScottAdvection.webp","extract":"Going with the flow?","equation":"","categories":["patterns","parabolic"],"body":"Each of the examples on this page will be a variation of a previous example incorporating one or more linear advection terms. This will introduce a velocity parameter $V$ and, in the unidrectional case, a direction $\\theta$. ## Gliders swimming upstream * We start with the glider example from the [Gray–Scott](/nonlinear-physics/gray-scott) model, and add an advection term in the $u$ equation to get an example of [drifting gliders](/sim/?preset=GrayScottGlidersAdvecting). * The boundaries here will destroy the patterns as mass will be lost at boundaries orthogonal to the flow. Decreasing $V$ will allow the moving spots to survive longer, whereas increasing it will lead to wave-selection. * As discussed in its own page, this model has a huge range of behaviours, and these are all likely influenced by advection. ## Localised Swift–Hohenberg swiftly moving * We next consider the localised solutions from the [Swift–Hohenberg equation](/nonlinear-physics), and consider two cases of moving patterns under advection. The first is [unidirectional motion](/sim/?preset=swiftHohenbergLocalisedDirectedAdvection) at an angle $\\theta$, and the second is [rotational advection](/sim/?preset=swiftHohenbergLocalisedRotationalAdvection). * In both cases, changing $V$ impacts the velocity of this movement. Note that if $V$ becomes too large in the rotational case, the pattern can generate structures which misbehave at the boundaries (as these will interact with advection in odd ways). In particular, the rotating velocity field which is advecting $u$ is itself not periodic. * Changing $P$ and restarting the simulation allows you to explore how these different localised solutions change their structure under advection. ","url":"/nonlinear-physics/advecting-patterns","tags":["patterns","parabolic"],"img":"/assets/images/GrayScottAdvection.webp","page_number":70,"id":31},{"layout":"page","title":"Viscous Burgers' equation","lesson_number":60,"thumbnail":"/assets/images/BurgersEquation.webp","extract":"Nonlinear waves","equation":"$\\pd{u}{t} =-u\\pd{u}{x}+\\varepsilon \\pdd{u}{x}$","categories":["waves","parabolic"],"body":"(Viscous) [Burgers' equation](https://en.wikipedia.org/wiki/Burgers%27_equation): $$\\pd{u}{t} =-u\\pd{u}{x}+\\varepsilon \\pdd{u}{x}.$$ * Load the [interactive simulation](/sim/?preset=BurgersEquation). Locally in space, the wave is translating to the right with a speed $u$, and hence larger initial amplitudes have greater speed. * In the limit of $\\varepsilon \\to 0$, the solution forms discontinuous shock solutions. These can be approximated with small $\\varepsilon$ (as these solutions will be smooth), though advection will cause numerical difficulties (e.g. oscillations near the front of the wave). Nonzero $\\varepsilon$ leads to some loss of amplitude/height of the wave, but otherwise roughly captures the limiting shock behaviour as long as it is sufficiently small. ","url":"/nonlinear-physics/burgers","tags":["waves","parabolic"],"img":"/assets/images/BurgersEquation.webp","page_number":60,"id":32},{"layout":"page","title":"Cahn–Hilliard equation","lesson_number":30,"thumbnail":"/assets/images/CahnHilliard.webp","extract":"Phase separation","equation":"$\\pd{u}{t}=\\nabla^2 (F(u)-g\\nabla^2u)+f(u)$","categories":["patterns","parabolic"],"body":"We now study the [Cahn–Hilliard equation](https://en.wikipedia.org/wiki/Cahn%E2%80%93Hilliard_equation) with an extra reaction term, $$\\pd{u}{t} = r\\nabla^2 (u^3-u-g\\nabla^2u)+u-u^3,$$ with periodic boundary conditions. - Load the [interactive simulation](/sim/?preset=CahnHilliard) - The initial condition is taken to be random noise at the level of the discretised system, and the initial timescale, given by $r$, is small. Increase $r$ by one or two orders of magnitude to speed up the simulation, and observe the coarsening process as described in this [2001 article](https://people.maths.ox.ac.uk/trefethen/pdectb/cahn2.pdf). There are lots of things that you can do with this equation (with or without the reaction term). For instance, you can extend it to a 'non-reciprocal' Cahn–Hilliard system as in [Brauns and Marchetti](https://doi.org/10.1103/PhysRevX.14.021014), which exhibits pretty patterns that you can play with in this [interactive simulation](/sim/?preset=CahnHilliardNonreciprocal). Thanks to Lloyd Fung for pointing out this example! ","url":"/nonlinear-physics/cahn-hilliard","tags":["patterns","parabolic"],"img":"/assets/images/CahnHilliard.webp","page_number":30,"id":33},{"layout":"page","title":"Gray–Scott model","lesson_number":50,"thumbnail":"/assets/images/GrayScott.webp","extract":"Intricate reaction–diffusion patterning","equation":"$\\pd{u}{t}=\\nabla^2 u+u^2v - (a+b)u,$ $\\pd{v}{t}=D\\nabla^2v -u^2v + a(1 - v)$","categories":["patterns","waves","chaos","parabolic"],"body":"A reaction–diffusion system heavily studied for its complex dynamics is the Gray–Scott system, given by $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+u^2v - (a+b)u,\\\\ \\pd{v}{t}&=D\\nabla^2v-u^2v + a(1 - v),\\end{aligned}$$ where we take $D=2$ and only vary $a,b>0$. This model has a [wide range of behaviours](http://www.mrob.com/pub/comp/xmorphia/index.html), shown in [another WebGL simulator](https://pmneila.github.io/jsexp/grayscott/) that partially inspired VisualPDE. * Load the [interactive simulation](/sim/?preset=GrayScott) to explore the system. A [famous 1993 paper](https://arxiv.org/abs/patt-sol/9304003) on this model explored a range of the parameters $a$ and $b$ to classify different behaviours, and many people have hence made these parameters depend linearly on $x$ and $t$ to see all of this behaviour at once. * This [classification simulation](/sim/?preset=GrayScottPearsonClassification) explores this approach, with $a$ depending on $y$ in the range $a \\in [0,0.07]$ and $b$ depending on $x$ in the range $b \\in [0.02, 0.068]$. Building from the previous simulation, we can rescale the heterogeneity to still be monotonic, but to use up more of the domain to see different dynamical regimes. * Explore this in this [rescaled simulation](/sim/?preset=GrayScottPearsonClassificationRescaled), where we also plot the variable $v$ instead by default (you can click on {{ layout.views }} to change this to plot $u$ instead). Interestingly, the value of $D=2$ used gives a very rich parameter space, whereas making $D$ smaller reduces the regions of patterned behaviour, and taking $D$ larger increases it at the cost of making things more stationary and more spot-like for most of the parameter domain. Furthermore, when $D=1$ the system no longer supports stationary patterns, but does exhibit waves similar to the spiral waves in the equal-diffusion case of the [cyclic competition models](/mathematical-biology/cyclic-competition). Below we've listed some parameter combinations that give rise to different and interesting behaviours. One of our favourites is the [moving spots simulation](/sim/?preset=GrayScottGliders), which exhibits spots bobbing around. * Initiate this motion and then increase $b$ slowly to about $b=0.56$. The spots become sparse and start exhibiting strange diversions in their motions. | $a$ | $b$ | Description | |---|---|---| | 0.037 | 0.06 | Labyrinthine | | 0.03 | 0.062 | Spots | | 0.025 | 0.06 | Pulsating spots | | 0.078 | 0.061 | Worms | | 0.039 | 0.058 | Holes | | 0.026 | 0.051 | Spatiotemporal chaos | | 0.034 | 0.056 | Intermittent chaos/holes | | 0.014 | 0.054 | Moving spots (glider-like) | | 0.018 | 0.051 | Small waves | | 0.014 | 0.045 | Big waves | | 0.062 | 0.061 | U-skate world | ","url":"/nonlinear-physics/gray-scott","tags":["patterns","waves","chaos","parabolic"],"img":"/assets/images/GrayScott.webp","page_number":50,"id":34},{"layout":"page","title":"Solitons","lesson_number":80,"thumbnail":"/assets/images/KdV.webp","extract":"Korteweg–De Vries & Zakharov–Kuznetsov equations","equation":"$\\pd{\\phi}{t}=-\\pdn{\\phi}{x}{3}-6\\phi \\pd{\\phi}{x}$","categories":["integrable","hyperbolic"],"body":"Here is an implementation of the [Korteweg–De Vries (KdV) equation](https://en.wikipedia.org/wiki/Korteweg%E2%80%93De_Vries_equation), $$\\pd{\\phi}{t}=-\\pdn{\\phi}{x}{3}-6\\phi \\pd{\\phi}{x},$$ which is a very simple model of solitons, as described at the bottom of the page for the [nonlinear Schrödinger equation](/nonlinear-physics/nls-cgl). The [interactive simulation](/sim/?preset=KdV) starts with two solitons of different amplitudes and speeds, with the larger one moving more quickly and hence overtaking the smaller one at first. While they occupy the same space, these solitons cannot be clearly distinguished as their ampltiudes locally add together, but as the faster soliton moves more quickly it eventually separates from the slower soliton, and neither speed nor amplitude of either soliton is changed. This example was helpfully constructed by [Paul Sutcliffe](https://www.durham.ac.uk/staff/p-m-sutcliffe/). ## 2D vortical solitons There are also 2D analogues of solitons sometimes called vortical solitons. The modified Zakharov–Kuznetsov model is given by $$\\pd{u}{t} = -\\frac{\\partial^3 u}{\\partial x^3}-\\frac{\\partial^3 u}{\\partial x \\partial y^2} - u \\pd{u}{x}-b\\nabla^4 u,$$ where $b$ is a small dissipative term used to reduce radiation. This [2D soliton simulation](/sim/?preset=ZKSoliton) shows one such vortical soliton moving in the positive $x$ direction. ","url":"/nonlinear-physics/kdv","tags":["integrable","hyperbolic"],"img":"/assets/images/KdV.webp","page_number":80,"id":35},{"layout":"page","title":"Kuramoto–Sivashinsky equation","lesson_number":40,"thumbnail":"/assets/images/KuramotoSivashinsky.webp","extract":"Spatiotemporal chaos","equation":"$\\pd{u}{t}=-\\nabla^2u-\\nabla^4u-|\\vnabla u|^2 $","categories":["chaos","parabolic"],"body":"We now study the [Kuramoto–Sivashinsky equation](https://en.wikipedia.org/wiki/Kuramoto%E2%80%93Sivashinsky_equation), $$\\pd{u}{t} = -\\nabla^2u-\\nabla^4u-|\\nabla u|^2,$$ with periodic boundary conditions. * Load the [interactive simulation](/sim/?preset=KuramotoSivashinsky). If you perturb the solution, it should devolve into a kind of spatiotemporal chaos of oscillation and movement. Importantly, the patterns which emerge have a certain set of coherent wavelengths, which suggests that the dynamics is that of finite-dimensional chaos, rather than fully turbulent mixing. ## Numerical notes The equation above is far from the cross-diffusion kind of system our solver is built for. However, using the product rule and an algebraic substitution, we can write it as: $$\\begin{align} \\pd{u}{t}& = -\\vnabla \\cdot [ (1+u)\\vnabla u + \\vnabla v]+uv-au, \\\\ v& = \\nabla^2 u, \\end{align}$$ where $a$ is a damping coefficient used to help stabilise the solver. For $a=0$, this is exactly the fourth-order equation above. ","url":"/nonlinear-physics/kuramoto-sivashinsky","tags":["chaos","parabolic"],"img":"/assets/images/KuramotoSivashinsky.webp","page_number":40,"id":36},{"layout":"page","title":"Diffusively coupled Lorenz model","lesson_number":140,"thumbnail":"/assets/images/Lorenz.webp","extract":"Butterfly effects in space","equation":"$\\pd{X}{t} = D \\nabla^2 X + \\sigma \\left(Y-X\\right)$, $\\pd{Y}{t} = D \\nabla^2 Y + X \\left(\\rho-Z\\right)-Y$, $\\pd{Z}{t} = D \\nabla^2 Z + X Y-\\beta Z$","categories":["chaos","integrable","parabolic"],"body":"The [Lorenz system](https://en.wikipedia.org/wiki/Lorenz_system) is a well-known system of three ordinary differential equations that exhibit chaotic dynamics. If we put a copy of this system at every spatial point and couple these via diffusion (that is, adding a Laplacian to each equation), we arrive at the following system: $$ \\begin{aligned} \\pd{X}{t} &= D \\nabla^2 X + \\sigma \\left(Y-X\\right),\\\\ \\pd{Y}{t} &= D \\nabla^2 Y + X \\left(\\rho-Z\\right)-Y,\\\\ \\pd{Z}{t} &= D \\nabla^2 Z + X Y-\\beta Z, \\end{aligned} $$ which can exhibit a variety of spatiotemporal behaviours. * Load the [interactive simulation](/sim/?preset=Lorenz) to see a random initial condition evolve into several complex oscillating structures. These change over long timescales, so you may want to watch the simulation for a while to see how they coalesce and interact. * The initial condition uses a random perturbation across the spatial domain. If you change $X(t=0)=0$, the system will be at an equilibrium state and not move. If you then click, you can initiate localised travelling oscillations, with multiple clicks interacting with one another in interesting ways. * Modifying the value of $D$, which is effectively the coupling strength between local chaotic systems, can be one fun way to explore the parameter space. For large values (e.g. $D=5$) the system tends toward a uniform state with large-wavelength oscillations, whereas for small values (e.g. $D=0.2$) it behaves more erratically, breaking up into local patches of oscillating and chaotic regions. ","url":"/nonlinear-physics/lorenz","tags":["chaos","integrable","parabolic"],"img":"/assets/images/Lorenz.webp","page_number":140,"id":37},{"layout":"page","title":"Complex Ginzburg–Landau","lesson_number":20,"thumbnail":"/assets/images/complexGinzburgLandau.webp","extract":"A world of complexity","equation":"$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)\\psi+(b_r+\\i b_i)\\psi|\\psi|^2$","categories":["chaos","integrable","parabolic"],"body":"Here is an implementation of a [(complex) Ginzburg–Landau equation](https://arxiv.org/abs/cond-mat/0106115) given by $$\\pd{\\psi}{t}=(D_r+\\i D_i)\\nabla^2 \\psi+(a_r+\\i a_i)\\psi+(b_r+\\i b_i)\\psi|\\psi|^2,$$ where we typically need $b_r,D_r \\geq 0$ for solutions to exist. * Load the [interactive simulation](/sim/?preset=complexGinzburgLandau) * Change the parameter $b_i$ to see a wide range of interesting behaviours. The values $b_i=-5, -1, 0, 1, 2$ all give distinct dynamical regimes, for example. # Numerical notes As in the [Schrödinger equation](/basic-pdes/stabilised-schrodinger), we have to separate out the real and imaginary parts of $\\psi$ to simulate it. We write $\\psi=u+\\i v$ to find $$\\begin{aligned}\\pd{u}{t}&=D_r\\nabla^2u-D_i\\nabla^2 v+a_ru-a_iv+(b_ru-b_iv)(u^2+v^2),\\\\ \\pd{v}{t} &= D_i\\nabla^2 u+D_r\\nabla^2v+a_rv+a_iu+(b_rv+b_iu)(u^2+v^2). \\end{aligned}$$ # Solitons The [nonlinear Schrödinger equation](https://en.wikipedia.org/wiki/Nonlinear_Schr%C3%B6dinger_equation) is a special case of this model, typically written as $$ \\i\\pd{\\psi}{t}=-\\nabla^2 \\psi+\\kappa\\psi|\\psi|^2. $$ The sign of $\\kappa$ determines if the system is 'focusing' or 'defocusing' and, hence, if we can observe dark or bright [solitons](https://en.wikipedia.org/wiki/Soliton). This [soliton simulation](/sim/?preset=NonlinearSchrodingerSoliton) is an example of a soliton moving to the right at a speed $c$, determined entirely by the initial condition. If you change the value of $\\kappa$ and restart the simulation, you can observe different behaviours. For example, $\\kappa=-1$ gives a defocusing equation, for which the soliton eventually breaks apart into something resembling a moving [Jacobi elliptic function](https://en.wikipedia.org/wiki/Jacobi_elliptic_functions). We note that the simulator used does not preserve the conserved quantities in this model, so may give spurious or incorrect solutions for some parameters or initial conditions. # Coupled Ginzburg–Landau systems We can also consider generalisations of coupled systems, particularly an optics formalism known as 'cross-phase modulation'. Models of this form with cubic nonlinearities look like $$\\begin{aligned}\\pd{\\psi_1}{t}&=(D_{1r}+\\i D_{1i})\\nabla^2 \\psi_1+(a_{1r}+\\i a_{1i})\\psi_1+(b_{1r}+\\i b_{1i})\\psi_1\\left( |\\psi_1|^2+\\alpha_1|\\psi_2|^2 \\right),\\\\ \\pd{\\psi_2}{t}&=(D_{2r}+\\i D_{2i})\\nabla^2 \\psi_2+(a_{2r}+\\i a_{2i})\\psi_2+(b_{2r}+\\i b_{2i})\\psi_2\\left( |\\psi_2|^2+\\alpha_2|\\psi_1|^2 \\right). \\end{aligned}$$ The parameters $\\alpha_1$ and $\\alpha_2$ influence how much the two wavefunctions interact with one another. If these interactions are strong, either species can be driven to extinction, as described in [a 2019 paper on amplitude death](https://arxiv.org/abs/1803.02147). In intermediate cases, the two wavefunctions may coexist, leading to dynamics where the wavefunctions are nonzero only in separate subsets of the domain, as described in [a 2018 paper on saturable nonlinearities](https://doi.org/10.1016/j.aop.2018.07.003). * This [separation simulation](/sim/?preset=CoupledCGL) explores these dynamics, where the wavefunctions are locally chaotic but their boundaries are determined by where the other wavefunction is nonzero. * Toggle between the amplitudes of each wavefunction by clicking {{ layout.views }} and selecting one wavefunction or the other. ","url":"/nonlinear-physics/nls-cgl","tags":["chaos","integrable","parabolic"],"img":"/assets/images/complexGinzburgLandau.webp","page_number":20,"id":38},{"layout":"page","title":"Nonlinearly elastic beams","lesson_number":110,"thumbnail":"/assets/images/nonlinear-beam.webp","extract":"Exploring overdamped state-dependent stiffness","equation":"$\\pd{y}{t}=-\\pdd{}{x}[E(y)\\pdd{y}{x}]$","categories":["elasticity","parabolic"],"body":"In the overdamped regime (i.e. in the absence of inertia), the dimensionless equation of motion for a beam with a small deflection $y(x,t)$ is $$\\begin{aligned}\\pdd{y}{t}=-\\pdd{}{x}\\left(E\\pdd{y}{x}\\right),\\end{aligned}$$ where $E$ represents the stiffness of beam, or how difficult it is to bend. Traditionally, this stiffness is taken to be a constant or perhaps to depend on the position $x$. In the simulation below, we consider a beam with a stiffness that depends on the local curvature, so that $$\\begin{aligned}E = E\\left(\\pdd{y}{x}\\right) = E^\\star + \\Delta_E\\frac{1+\\tanh{(\\pdd{y}{x}/\\epsilon})}{2} \\end{aligned}$$ for baseline stiffness $E^\\star$, stiffness change $\\Delta_E$, and sensitivity $\\epsilon$. We can play with $\\Delta_E$ using the slider below. The minimum value corresponds to a beam with constant stiffness, while the maximum value corresponds to a beam with a stiffness that depends strongly on the curvature. A quick exploration highlights that the dynamics of the beam depend significantly on the differential stiffness. Play with this example in more detail in this [customisable simulation](/sim/?preset=differentialStiffness). ","url":"/nonlinear-physics/nonlinear-beams","tags":["elasticity","parabolic"],"img":"/assets/images/nonlinear-beam.webp","page_number":110,"id":39},{"layout":"page","title":"Diffusively coupled oscillators","lesson_number":140,"thumbnail":"/assets/images/VanderPolOscillator.webp","extract":"Nonlinearity and oscillation in space","equation":"$\\pdd{X}{t} = D \\nabla^2 X+ \\mu(1-X^2)\\pd{X}{t}-X$","categories":["chaos","integrable","parabolic"],"body":"Below are some examples of nonlinear oscillators where we think of each spatial point as an ODE and couple these by diffusion. *Warning:* As these are oscillators, do be mindful that some parameters *may have rapid flashing.* ## Coupled Van der Pol oscillators The (unforced) [Van der Pol oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator) is a well-known example of a nonlinear oscillator of the form $$ \\diff{^2X}{t^2} = \\mu(1-X^2)\\diff{X}{t}-X,\\\\ $$ where $\\mu$ is a coefficient of nonlinear damping. We now consider adding linear diffusive coupling to a spatial variant of it. Writing this as a system of first-order equations in time, we then have $$ \\begin{aligned} \\pd{X}{t} &= Y ,\\\\ \\pd{Y}{t} &= D (\\nabla^2 X + \\varepsilon \\nabla^2 Y) + \\mu(1-X^2)\\pd{X}{t}-X, \\end{aligned} $$ where $D$ is a diffusion coefficient, and the term involving $\\varepsilon$ is a kind of artificial diffusion to dampen numerical instabilities. The [interactive Van der Pol simulation](/sim/?preset=VanDerPol) shows how this system behaves with random initial data. Changing $\\mu$ gives different structures acting on different time and length scales. You can also set the initial condition to be a constant (e.g. 0) and click to initiate a wave. ## Coupled Duffing equations The [Duffing equation](https://en.wikipedia.org/wiki/Duffing_equation) is another example of a nonlinear oscillator, where again we can add linear diffusive coupling to a spatial variant of it to get: $$ \\begin{aligned} \\pd{X}{t} &= \\varepsilon D \\nabla^2 X + Y,\\\\ \\pd{Y}{t} &= D \\nabla^2 X -\\delta Y-\\alpha X-\\beta {X}^{3}+\\gamma \\cos{\\left(\\omega t\\right)}, \\end{aligned} $$ where $D$, $\\alpha$, $\\beta$ are parameters of the model, $\\varepsilon$ is again an artificial diffusion term, and we have included a temporal forcing term (with parameters $\\gamma$ and $\\omega$) to increase the variety of observed dynamics. The [interactive Duffing equation simulation](/sim/?preset=Duffing) simulates this model with random initial conditions. Changing the value of $\\alpha$ can lead to a variety of interesting dynamics. ","url":"/nonlinear-physics/oscillators","tags":["chaos","integrable","parabolic"],"img":"/assets/images/VanderPolOscillator.webp","page_number":140,"id":40},{"layout":"page","title":"Perona–Malik equation","lesson_number":90,"thumbnail":"/assets/images/PeronaMalik.webp","extract":"Image denoising via nonlinear anisotropic diffusion","equation":"$\\pd{u}{t}=\\vnabla \\cdot \\left (\\mathrm{e}^{-D |\\vnabla u|^2}\\vnabla u\\right) $","categories":["art","parabolic"],"body":"Here is an implementation of the [Perona–Malik equation](https://en.wikipedia.org/wiki/Anisotropic_diffusion), $$\\pd{u}{t}=\\vnabla \\cdot \\left (\\mathrm{e}^{-D |\\vnabla u|^2}\\vnabla u\\right),$$ which is used for image denoising. In particular, the nonlinear anisotropic diffusion causes sharp gradients to sharpen, and smooths out more shallow noisy regions. * Load the [interactive simulation](/sim/?preset=PeronaMalik): it starts with some text from a quote by [Bernt Øksendal](https://en.wikipedia.org/wiki/Bernt_%C3%98ksendal), with some noise added on top of it. * Press {{ layout.play }} to cause the initial condition to sharpen, making the text clearer. * You can pause the simulation and use the brush to add more noise to the image. * Play with the parameter $D$ to see how it influences the ability to denoise the text. You can change the image to one of a noisy [aperiodic tiling](https://en.wikipedia.org/wiki/Einstein_problem) by modifying the initial conditions to use $I_S$ rather than $I_T$, and then restarting the simulation. Other images will also work, but these may need some fine-tuning to have this algorithm improve their quality. In particular, finer meshes may be needed to preserve small edges. ","url":"/nonlinear-physics/perona-malik","tags":["art","parabolic"],"img":"/assets/images/PeronaMalik.webp","page_number":90,"id":41},{"layout":"page","title":"Stochastic partial differential equations","lesson_number":120,"thumbnail":"/assets/images/stochastic-pdes.webp","extract":"Randomness in time and space","equation":"$\\pd{u}{t}=D\\nabla^2 u +f(u)+\\frac{\\mathrm{d}W_t}{\\mathrm{d}t}$","categories":["patterns","waves","hyperbolic","parabolic"],"body":"# Stochastic pattern formation We consider a stochastic version of the [Gray–Scott model](/nonlinear-physics/gray-scott) given by $$\\begin{aligned}\\pd{u}{t}&=\\nabla^2 u+u^2v - (a+b)u+\\sigma\\diff{W_t}{t}u,\\\\ \\pd{v}{t}&=D\\nabla^2v-u^2v + a(1 - v),\\end{aligned}$$ where $W_t$ is an approximation of a [Brownian sheet](https://en.wikipedia.org/wiki/Brownian_sheet), representing noise in both space and time, so its derivative is understood in the sense of [stochastic calculus](https://en.wikipedia.org/wiki/Stochastic_calculus). * Load the interactive [stochastic reaction–diffusion model](/sim/?preset=StochasticGrayScott) * The model is initially deterministic ($\\sigma=0$), so the initial condition simply spreads out to make a homogeneous state across the domain. Clicking indicates that this homogeneous equilibrium is stable, even to large perturbations. * Increasing the value of $\\sigma$ in the range $(0.1,0.2)$, we can observe that noise destabilises this equilibrium, forming stripe and spot-like patterns. This is an example of [stochastic resonance](https://en.wikipedia.org/wiki/Stochastic_resonance) in reaction-diffusion systems. Smaller values of $\\sigma$ will select for stripes, and larger for spots. * Further increasing $\\sigma$ to the value of $0.3$ or so will destroy these patterns, as the noise eventually destabilises everything. This is sometimes known as stochastic extinction or random attractor collapse. # Wave propagation through a random medium Next we consider a version of the [inhomogeneous wave equation](/basic-pdes/inhomogeneous-wave-equation) where the diffusion coefficient is a random function of space, $$ \\pdd{u}{t} = \\vnabla \\cdot \\left[\\eta(\\v{x},\\sigma) \\vnabla u \\right], $$ where $\\eta(\\v{x},\\sigma)$ is a smoothed spatial random variable approximated as a Gaussian with mean $1$ and variance which scales with $\\sigma$. * Load the interactive [random wave equation](/sim/?preset=RandomWaveEquation) * Click to initiate a wave at some point in the domain. * The default noise level is $\\sigma=0.5$. If you change this value and restart the simulation by pressing {{ layout.restart }}, you can observe deterministic wave propagation for small values of $\\sigma$, and noisier wave behaviour for larger values. # Stochastic vegetation waves Consider a stochastic version of the [Klausmeier model](/mathematical-biology/vegetation-patterns) in 1D of the form: $$ \\begin{aligned} \\pd{n}{t} &= \\pdd{n}{x} + w {n}^{2}-m n+\\sigma \\diff{W_t}{t} \\left[\\frac{n}{1+n}\\right],\\\\ \\pd{w}{t} &= \\pdd{w}{x} + a-w-w {n}^{2}+V \\pd{w}{x}. \\end{aligned} $$ * Load the interactive [stochastic Klausmeier model](/sim/?preset=StochasticKlausmeier) * The parameter $\\sigma$ represents the strength of the noise, so increasing or decreasing it will lead to more stochastic or more deterministic behaviour, respectively. * The noise function should scale correctly independently of the geometry and dimension. You can see how it behaves in 2D by pressing {{ layout.settings }} → **Domain** and change **Dimension** from 1 to 2. Playing with $\\sigma$ as well as other parameters, and clicking to perturb the waves, shows that irregularity of the waves can occur in different ways with stochastic forcing. # Numerical health warning Randomness and stochastic forcing can lead to less regularity and stability of numerical schemes. **Warning:** the method only works for the forward Euler timestepping scheme! All other timestepping schemes will not scale properly with the timestep. In implementing our random noise terms, we have taken $$ \\diff{W_t}{t} \\propto \\frac{1}{\\sqrt{\\dt \\, \\dx^N}}\\xi(t,\\v{x}), $$ with $\\dt$ and $\\dx$ the space and time steps respectively, and $N$ is the number of dimensions. The variable $\\xi$ represents (for each spatial point and every time step) an independently distributed normal random variable with mean $0$ and variance $1$. The scaling in time is to preserve the Brownian increment scaling of $W_t \\propto \\sqrt{\\dt}$ after the multiplication by $\\dt$ from the forward Euler stepping. Similarly, we take $\\eta$ to scale the same way in space, but it will not scale with time. We also mollify $\\eta$ by running a diffusion smoothing on it for a short time. ","url":"/nonlinear-physics/stochastic-pdes","tags":["patterns","waves","hyperbolic","parabolic"],"img":"/assets/images/stochastic-pdes.webp","page_number":120,"id":42},{"layout":"page","title":"Swift–Hohenberg equation","lesson_number":5,"thumbnail":"/assets/images/swiftHohenberg.webp","extract":"Criticality and localisation in pattern formation","equation":"$\\pd{u}{t}=ru - (1+D\\nabla^2)^2u+au^2+bu^3+cu^5$ with periodic boundary conditions","categories":["patterns","parabolic"],"body":"Swift–Hohenberg equation: $$\\pd{u}{t} = ru - (k_c^2+\\nabla^2)^2u+au^2+bu^3+cu^5,$$ with periodic boundary conditions, and we need $c<0$ (or $b<0$ if $c=0$) for stability. * Load the [interactive simulation](/sim/?preset=swiftHohenberg). * Depending on the signs of $r$, $a$, and $b$, this system can support a wide range of patterns and dynamical behaviour. One important class of behaviour is subcriticality, where the dynamics of the system can become quite complicated and include things like multistability of homogeneous and patterned states, and localised solutions as described below. # Localised solutions When $r<0$, $a>0$, and $b<0$, the system can be in a subcritical regime that supports both stable patterned states and the stable homogeneous state $u=0$. Specific initial conditions can induce localised patterns, which fall off to the background of $u=0$ throughout most of the domain. * Load this [localised simulation](/sim/?preset=swiftHohenbergLocalised) as one example. * Change the initial conditions or click to induce localised structures throughout the domain: see that these structures only materialise if they are sufficiently far from the homogeneous state (as otherwise perturbations will decay back to it). This example is based on [a 2023 paper by Dan Hill and collaborators](https://iopscience.iop.org/article/10.1088/1361-6544/acc508) which studies symmetric localised solutions of the Swift-Hohenberg equation. * The default initial condition picks out a solution with $D_4$ symmetry. * If you change the parameter $P$ to the value $2$ and then press {{ layout.erase }}, this will replace the initial condition with one that evolves to a hexagonal solution ($D_6$ symmetry). * If you set $P=3$ and press {{ layout.erase }}, this will replace the initial condition with one that evolves to a $D_{12}$-symmetric solution. ","url":"/nonlinear-physics/swift-hohenberg","tags":["patterns","parabolic"],"img":"/assets/images/swiftHohenberg.webp","page_number":5,"id":43},{"layout":"page","title":"Hyperbolic reaction–diffusion systems","lesson_number":100,"thumbnail":"/assets/images/FHNTuringWave.webp","extract":"Turing wave instabilities","equation":"$\\tau\\pdd{u}{t}+\\pd{u}{t}=D_u\\nabla^2 u+f(u,v),$ $\\tau\\pdd{v}{t}+\\pd{v}{t}=D_v\\nabla^2v+ g(u,v)$","categories":["patterns","waves","chaos","hyperbolic"],"body":"One can show that two-species reaction–diffusion systems can only ever have Turing-like instabilities with real growth rates. In contrast, hyperbolic reaction–diffusion systems (or systems with more than two species) allow for [Turing and wave](https://arxiv.org/abs/2204.13820) (or sometimes wave or Turing–Hopf) instabilities. Such instabilities lead to spatial eigenfunctions that grow and oscillate, typically giving rise to spatiotemporal dynamics. Here we consider a hyperbolic version of the [Brusselator](/mathematical-biology/brusselator), given by $$\\begin{aligned}\\tau\\pdd{u}{t}+\\pd{u}{t}&=D_u\\nabla^2 u+a-(b+1)u+u^2v,\\\\ \\tau\\pdd{v}{t}+\\pd{v}{t}&=D_v\\nabla^2v+ bu-u^2v,\\end{aligned}$$ where there are two new terms proportional to $\\tau$. The normal Turing instabilities will occur for $D_uD_v$, so we set $D_u=D=2$ and $D_v=1$. * In a [one-dimensional simulation](/sim/?preset=BrusselatorTuringWave1D), an initial cosine perturbation on a small domain leads to an oscillating cosine, which is what linear theory would predict. The system loses this instability as $\\tau$ is decreased to $0.1$ or below, with a decaying oscillation amplitude for intermediate values. * On a larger domain, a [two-dimensional simulation](/sim/?preset=BrusselatorTuringWave2D) exhibits a variety of transient dynamics depending on exactly how the uniform equilibrium is perturbed, culminating in wave–like spatiotemporal behaviour. Again decreasing $\\tau$ or increasing $D$ will reduce the effect of the instability, decreasing the amplitude of the solution. * Here is a [different 1D example](/sim/?preset=TuringWaveFHN) and the [same system in 2D](/sim/?preset=TuringWaveFHN2D) based on the [FitzHugh–Nagumo system](/mathematical-biology/fitzhugh-nagumo). For more details on such systems and their generalisations, take a look at [this 2022 paper](https://arxiv.org/abs/2204.13820). ","url":"/nonlinear-physics/turing-wave","tags":["patterns","waves","chaos","hyperbolic"],"img":"/assets/images/FHNTuringWave.webp","page_number":100,"id":44},{"layout":"page","title":"Validating VisualPDE","lesson_number":10,"thumbnail":"/assets/images/ValidatingVisualPDE.webp","extract":"VisualPDE versus exact solutions","categories":["parabolic","hyperbolic"],"body":"When implementing VisualPDE, we were somewhat sceptical of browser-based computation and questioned if it could be relied upon, especially in the context of PDEs. Here we showcase some of the examples that have convinced us of VisualPDE's surprising accuracy. ### The heat equation Perhaps the simplest equation that VisualPDE can solve is the heat equation, as explored in this [detailed example](/basic-pdes/heat-equation). With $T(x,t)$ as the temperature in an infinite domain, the heat equation $$\\pd{T}{t}=D_T \\nabla^2 T$$ admits solutions of the Gaussian form $$T(x,t) = \\frac{1}{\\sqrt{t}}\\exp\\left(-\\frac{x^2}{4t}\\right).$$ Hence, if the initial data is Gaussian, the solution evolves as a Gaussian. We can simulate this scenario in VisualPDE by truncating the infinite domain (applying Neumann boundary conditions) and specifying initial data of this form. Note that the exponential solution decays rapidly to zero far away from the mean of the Gaussian, so that the finite-domain approximation is a very good one. This [heat equation simulation](/sim/?preset=heatEquation1DValidity) is set up to do just that. To check if the numerical solution is accurate, we've plotted the analytical solution (thin curve) on top of the numerical one (thick curve). As you might have hoped, VisualPDE does an excellent job of capturing the spatiotemporal evolution of the exact solution. This is especially remarkable as this particular simulation uses a fairly coarse spatial discretisation and a forward Euler timestepping scheme. If you turn on **Auto snap**: {{ layout.views }} → **Auto snap** and wait until $t=2\\times 10^{3}$, you'll actually start to see the plotting of the analytical solution break down due to the implementation of the exponential function on your GPU, and the two solutions begin to separate. ### The wave equation In our [first look at the wave equation](/basic-pdes/wave-equation), we saw how we can cast this hyperbolic PDE in an approximate parabolic form that can be solved by VisualPDE. The true wave equation in 1D, written as $$\\pdd{u}{t}=D \\nabla^2 u$$ for amplitude $u(x,t)$, has simple solutions if $\\partial u / \\partial t=0$ initially, composed only of leftward and rightward travelling waves. The exact form can be found easily using [d'Alembert's solution](https://mathworld.wolfram.com/dAlembertsSolution.html). In this [wave equation simulation](/sim/?preset=waveEquation1DValidity), we numerically solve our close approximation to the wave equation with stationary initial data, plotting the exact solution on top. As before, we observe very good agreement between the two solutions. As expected, this agreement lessens over time as the effects of our approximation accumulate. Reducing the regularisation parameter $C$ improves this agreement, but setting it to zero causes spurious oscillations to eventually emerge in the numerical solution. ### A conservative system As VisualPDE is designed to solve a broad range of PDEs, it often fails to precisely capture conserved quantities in special systems. The [Schrödinger equation](https://en.wikipedia.org/wiki/Schrödinger_equation) is a good example of this, explored on the [Schrödinger page](/basic_pdes/stabilised-schrodinger). In this [alternative simulation](/sim/?preset=stabilizedSchrodinger1DValidity), try changing the timestepping scheme and restarting the simulation. As might be expected, higher order schemes like the midpoint method and Runge-Kutta 4 do a better job of preserving the total integral of the system (which should be unity) than the (default) forward Euler method. To get a handle on this quantitatively, we've enabled **Auto pause**: {{ layout.settings }} → **Timestepping** → **Auto pause** which stops the simulation at a specified time so that you can compare the values obtained with each of the numerical schemes.","url":"/numerical-methods/validating-VisualPDE","tags":["parabolic","hyperbolic"],"equation":"","img":"/assets/images/ValidatingVisualPDE.webp","page_number":10,"id":45},{"layout":"page","title":"FAQs","lesson_number":15,"thumbnail":"/assets/images/question-marks.webp","extract":"Unsure about something? Help is at hand","body":" --- ## Sharing and citing ### How do I cite VisualPDE in my article? The VisualPDE paper is out! You can find it [online](https://doi.org/10.1007/s11538-023-01218-4) for free and cite it as Walker, B.J., Townsend, A.K., Chudasama, A.K. et al. VisualPDE: Rapid interactive simulations of partial differential equations. Bulletin of Mathematical Biology 85, 113 (2023). ### Am I allowed to make and share content using VisualPDE.com? Yes! We would love to see you making and sharing content using VisualPDE. We ask that any content you create somehow points back to [VisualPDE.com](https://visualpde.com) – a great way to do this is to share a link directly to your simulation! Feel free to use VisualPDE in articles, images, videos, scientific works, social media posts, etc. ### I want to share my cool simulation – how do I do this? VisualPDE is designed for sharing. Whether you've fallen in love with one of our examples or you've crafted your own using the VisualPDE interface, you can share the current simulation using a link. Simply open the share sheet by clicking {{ layout.share }} and click 'Copy link' to put a URL on your clipboard that you can share anywhere by pasting! It's that easy! These links can be quite long, so we recommend using a (free) shortening service like [tinyURL.com](https://tinyurl.com/app) if you want a concise link for sharing. ### How do I take a pretty screenshot or video without all the user interface showing up? Screenshots and videos are simple in VisualPDE. Simply open the share sheet by clicking {{ layout.share }} and click 'Save image' to download a screenshot to your device, or 'Record clip' to begin a recording that will download to your device when done (we recommend Chrome or Firefox for this). Recordings can be up to 60s long and will stop before then if you pause the simulation or click {{ layout.stop_recording }} ### How do I make my videos compatible with social media and messaging apps? Different services accept different types of video, so compatibility is hard. Even worse, different browsers can only create certain types of video, so universal video compatibility is essentially impossible for us at VisualPDE. Fortunately, there are simple ways to convert video so that it is compatible with your favourite services. If you want a quick solution, ffmpeg-online will do this for you. Just drag and drop your video, ignore the rest of the boxes and hit the run button to generate a compatible video file. Even better: your video never leaves your device. If you prefer a command line solution, then [``ffmpeg``](https://www.ffmpeg.org) is once again your friend. If you have ``ffmpeg`` installed, running ``ffmpeg -i FILENAME output.mp4`` will almost certainly save a compatible copy of your video (``FILENAME``) as ``output.mp4``. Don't just take our word for it - try it out! ### Can I embed VisualPDE in my own site? Yes you can! Clicking {{ layout.share }} and then 'Embed' will put an [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) element on your clipboard that points to the current simulation. You can specify the complexity of the user interface that you want to be visible, selecting from the full experience, the minimal interface used in our [Visual Stories](/visual-stories), or no user interface at all. If you do this, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) so we can check out your site and your simulation! In principle, you can have as many embedded simulations on your site as you want. In practice, having lots of simulations running at once might cause stuttering on some devices. You can mitigate this by pausing simulations (VisualPDE consumes very few resources when paused) or by only showing a limited number of simulations onscreen at any one time (simulations that are out of view are automatically paused by your browser). You can also make your simulations less computationally demanding by reducing the number of timesteps per frame or the domain size. --- ## Errors Sometimes, mistakes happen. If something has gone wrong, VisualPDE will try its best to describe the error in a helpful way via a pop-up. We try to display a helpful error message to help you identify the problem. More cryptic messages are listed below. ### Undeclared identifier ``` ERROR: 0:87: 'k' : undeclared identifier ``` Here, the quantity 'k' has been used somewhere in one of the many free-text inputs in VisualPDE, but it hasn't been defined. The most common cause of this is using a parameter in the **Definitions** tab without defining it in the **Parameters** tab. Check your definitions and parameters to resolve this. Be careful to define parameters as constant numbers – dependence on other parameters, space, time, or species is not (yet) supported! ### Cyclic variables/parameters detected ``` Cyclic variables/parameters detected. Please check the definition(s) of a,b. ``` This error arises when the definitions of your variables or parameters mean that they depend on each other in a cyclic way that can't be resolved. For example, imagine parameters $a$ and $b$ are defined as $$\\begin{align}a &= b,\\\\ b &= a+1.\\end{align}$$ There is no solution to this system of equations, so check your definitions and try again. ### My error looks nothing like any of these Sometimes, errors won't look anything like these examples. If this is the case and the error message doesn't help you in resolving it, please follows the steps outlined [below](#error) and help make VisualPDE as stable as possible! NOTE: VisualPDE sometimes won't warn you about multiple errors that involve the same error message (we're working on it). So, if you fix an error involving 'k', you might not be warned about later errors involving 'k' in the same session. Reloading the page (making sure to have copied your configuration URL first!) is a good way of getting around this for now. ### The buttons don't work, but I want to keep playing! Very rarely, the simulation and the user interface may become unresponsive. If this happens: 1. Click {{ layout.help }} to bring up the user guide to try to solve your problem. 1. Reload the page. Sadly, this won't preserve the configuration beyond that specified in the URL. If the issue is persistent and you're confident that you've followed all the steps outlined in this guide, please report your issue as described [below](#error). ### How do I report an issue? Sometimes, something might go wrong (e.g. a part of the user interface is doing something strange, or the simulations are not working on your device). If you encounter an issue that can't be resolved using the [User Guide](/user-guide), we'd love to hear from you at [bugs@visualpde.com](mailto:bugs@visualpde.com). If you can, it will help us a lot if you could click {{ layout.settings }} → **Misc.** → **Debug** → **Copy debug** and paste the contents into your email. This will contain information about your current configuration that will help us resolve the problem. --- ## Beyond VisualPDE.com ### I want to use VisualPDE in my teaching/research/outreach – what do I do? VisualPDE is designed for customising and sharing. If you're new to the site, we recommend that you check out our [creator resources](/create) to get an idea of how to craft your own simulation, and make use of [link sharing](#linkSharing) to permanently save customised simulations. For instance, a popular way to create custom teaching materials is to simply include links to customised VisualPDE simulations in more traditional teaching materials, similar to the [examples](/explore) on the site. If you want to do more than this allows, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can help bring VisualPDE into your teaching, research, or outreach activities. ### I want to use VisualPDE for my business - can I? Almost certainly! However, we want to make sure that we do knowledge exchange properly, so do get in touch with us at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can make sure you'll get the best out of VisualPDE. ### I've got a feature request – who do I contact? We're always looking to improve VisualPDE and would love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com) if you think we can improve something about the experience. If you'd like to suggest a brand new PDE for the website, we're looking for examples that are qualitatively different to what is already on the site. That being said, if you've found a cool parameter set for a system that we haven't noted already, do let us know! If you can't seem to cast your PDE in a form that VisualPDE can solve, we encourage you to look at the [library of examples](/explore) to see how various types of PDE can be thrown into VisualPDE, which might provide some inspiration. If you still can't get VisualPDE to solve your system but you think it should/could be possible, we'd love to hear from you. ### Can I modify the source code of VisualPDE and host my own version? In short: yes! We've made VisualPDE open source for a reason and want to see as many people using it as possible. If you want to ship your own version of the source code, we ask that you follow the licences found in our [repository](https://github.com/Pecnut/visual-pde) and provide due credit to [VisualPDE.com](https://visualpde.com). If you're in any doubt about your specific case, do send us an email at [hello@visualpde.com](mailto:hello@visualpde.com) and we'll happily chat with you! We're all about making VisualPDE accessible to as many people as possible.","url":"/user-guide/FAQ","tags":"","equation":"","img":"/assets/images/question-marks.webp","page_number":15,"id":46},{"layout":"page","title":"Complete documentation","lesson_number":20,"thumbnail":"/assets/images/Brusselator.webp","extract":"A glossary of all the features you can play with","body":"Almost everything in VisualPDE is customisable. Here, we describe the basic functionality of every option that can be found in the menus of VisualPDE. --- ## Equations {{ layout.equations }} VisualPDE is all about solving equations. In the Equations pane, you can view and define the problem that VisualPDE will solve for you in your browser, complete with initial and boundary conditions. More advanced settings, including variable renaming, can be found under [**Settings**](#settings). ### Edit Customise all the terms in the PDEs that you would like to solve using natural syntax. See our discussion of [valid expressions](#writing-valid-expressions) for helpful examples that will guide you in posing your own PDE system. Typing in any of the fields will highlight the corresponding term in the typeset PDE above. - #### Typeset Have VisualPDE typeset the specified equations, making use of all the defined diffusion coefficients, functions and parameters. Terms will not be substituted in if they are constants that are not 0 or 1. Toggle this off to see the format of the equations that VisualPDE can interpret. - #### $D_u$, $D_v$, $D_w$, ... Set the diffusion coefficients of all the species in the simulation. When **Cross diffusion** is enabled, you can also set interaction terms, which are written $D_{uv}$ etc. These can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$) and any quantities defined in **Parameters**. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. Advanced users seeking diagonal anisotropic diffusion tensors (i.e. distinct diffusion coefficients in the coordinate directions) can define two coefficients at once by separating definitions with a semicolon. For example, `1;2` sets diffusion coefficients of `1` and `2` in the $x$ and $y$ directions, respectively. - #### $f_u$, $f_v$, $f_w$, ... Define the inhomogeneities in the equations. These can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. Advanced users can also make careful use of `RAND`, a uniformly random value in $[0,1]$, and `RANDN`, a normally distributed random number with unit variance and zero mean. This converts the equations into [stochastic partial differential equations](https://en.wikipedia.org/wiki/Stochastic_partial_differential_equation), which should only be solved using the Forward Euler timestepping scheme. Both `RAND` and `RANDN` require manually dividing by `sqrt(dt)` in non-algebraic equations so that the scheme resembles the [Euler-Maruyama method](https://en.wikipedia.org/wiki/Euler–Maruyama_method). The solution under other timestepping schemes is undefined. For convenience, we define `WhiteNoise` to be a normally distributed random variable with unit variance and zero mean, scaled by $1/sqrt{\\dt\\dx^N}$ where $N=1,2$ is the spatial dimension. This scales appropriately with timestep and spatial step and is suitable for direct use in PDEs, such as in our [stochastic example](/nonlinear-physics/stochastic-pdes). ### Parameters This menu contains a list of all the user-specified values that can be used throughout VisualPDE. New parameters can be defined using the empty input field at the bottom of the list of parameters. Parameters can depend on one another, but their definitions cannot be cyclic. #### Basics The basic syntax for defining a parameter is ``` name = value ``` which will make the quantity `name` available to the simulation. You can then freely change `value`, which will instantly propagate throughout VisualPDE. If you try to use a name that clashes with an internal variable (some of which are only found under the hood of VisualPDE), a warning will appear to inform you of this. Parameters can be removed by deleting the text that defines them. You can even choose a `name` that includes subscripts, such as `k_1u`. This will be interpreted as $k_{1u}$ automatically by VisualPDE. #### Sliders The more advanced syntax ``` name = value in [start,step,stop] ``` creates a slider for your variable, ranging between the `start` and `stop` values in increments of `step`. The `step` parameter can be omitted and VisualPDE will choose a step automatically. For example, ``` a = 0.5 in [0,1] ``` creates a slider that ranges between 0 and 1, with initial value 0.5 and an automatically determined step size. Parameters with sliders cannot be defined in terms of other parameters. The configuration of a slider (value, start, step, stop) can be updated by modifying the relevant parts of the expression that defines it. Sliders can be removed by deleting `in ...` from the parameter definition, and will be removed automatically when the associated parameter is removed. ### Boundary conditions Boundary conditions can be specified for any species in the simulation. The following boundary conditions are available: - Periodic - [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition) (e.g. $u\\onboundary = 0$) - [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition) (e.g. $\\pd{u}{n}\\onboundary = 0$) - [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition) (e.g. $(u + \\pd{u}{n})\\onboundary = 0$) Boundary conditions that allow you to specify values can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$) and any quantities defined in **Parameters**. Robin boundary conditions are the only type supported that allow you to use an unknown in the specification of its own boundary condition. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. An additional option, **Mixed...**, is also available, which allows you to specify different types of boundary condition on the Left, Right, Top and Bottom sides of rectangular domains. The easiest way to do this is using the graphical interface by clicking beside the boundary condition selector (unavailable during surface plots). Click the various boundaries to set the desired condition on each. These conditions can also be specified directly as a string, e.g. ``` Left: Dirichlet = 0; Right: Neumann = 1; Top: Robin = u; Bottom: Dirichlet = sin(x) ``` for the species $u$ would specify $u = 0$ on the left boundary, $\\pd{u}{n} = 1$ on the right boundary, $\\pd{u}{n} = u$ on the top boundary and $u = \\sin(x)$ on the bottom boundary. Sides can be specified in any order and are case sensitive. Omitting any side will default to periodic boundary conditions (beware, this may have unexpected results if the matching side is not also periodic; using the graphical interface prevents this). An additional type of condition, 'Ghost', can also be specified with Mixed boundary conditions. This advanced option pushes VisualPDE to its limits, overriding the value of the [ghost nodes](https://kyleniemeyer.github.io/ME373-book/content/bvps/finite-difference.html#using-central-differences-for-derivative-bcs) used in the spatial discretisation of the PDE, and should be used with caution. We make use of this option in our Visual Story on [virus transmission](/visual-stories/airborne-infections) to effectively double the size of the computational domain in one direction. This must be toggled on in {{ layout.settings }} → **Misc.** ### Initial conditions Initial conditions can be specified for any species in the simulation. They can be functions of space ($x$, $y$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), the random quantity `RAND`, a uniformly random value in $[0,1]$, the random quantity `RANDN`, a normally-distributed random number with unit variance and zero mean, and any quantities defined in **Parameters**. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. ### Advanced options Configure additional equation-related settings, including the number of species and the type of terms that will be included. - #### Num. species Specify the number of unknowns (1, 2, 3, or 4) in the simulation. - #### Num. algebraic Choose how many equations you want to be in algebraic form in systems with cross diffusion enabled. The equations will be put in algebraic form in reverse order, e.g. a 4-species system with 1 algebraic species will convert the final equation to be algebraic. - #### Species names Specify custom names for the species in VisualPDE, which often default to $u$, $v$, $w$, $q$. Names can be multi-character and can include letters, numbers, and underscores, but must each be a single 'word'. For example, `T_01` is a valid name (rendered as $T_{01}$) whilst `T 01` is not. Space or commas can be used to separate names in the list. Certain names are reserved under the hood, such as `H` for the Heaviside function, but VisualPDE will warn you if you attempt to use a reserved name. VisualPDE will automatically substitute the names of old species everywhere in the simulation and interface. - #### Cross diffusion Enable cross diffusion in systems with 2 or more species, enabling simulation of a wide range of systems in which a species can depend on the gradient of another. - #### Scales Set per-equation timescales (multiplying any time derivatives) $\\tau_u$, $\\tau_v$, $\\tau_w$, $\\tau_q$ to enable simpler entry of some types of systems. For algebraic equations, these quantities are no longer timescales, but retain their notation and function as per-equation scale factors. They can be functions of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. Importantly, **timescales must be non-zero**. Setting timescales to zero will result in singularities and are equivalent to large diffusion coefficients, large timesteps, or fast kinetic terms. --- ## Views {{ layout.views }} There are often multiple ways to visualise a solution to a PDE. In the Views pane, you can select from and customise a range of example-specific display options, or create your own. Everything you customise will be saved in the current View. If you share your simulation via a link, your Views will be sent along too. ### New (+) Create a new view with a placeholder name from the current view configuration. ### Rename Edit the name of the current View, enclosing any mathematics in `$` tags. You can even use emoji. ### Delete Delete the currently selected View. Only visible if there are at least two views. ### Expression Choose the expression that you want to be used to colour the domain, which can be any function of the species solved for, as well as space, time, and user-defined parameters. Often, this is either $u$, $v$, $w$ or $q$. Explicitly, this can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$) and their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). ### Plot type Choose from three types of plot: **line**, **plane** or **surface**. Any simulation can be viewed as any plot type. Line plots are the default plot type for 1D domains. Cubic splines are used to interpolate between nodes of the computational domain for smooth plotting. This may lead to transient oscillations appearing near discontinuities in the solution. Surface plots are constructed by using the chosen **Expression** as a height map, the limits of the colour axis and the **Height scale** parameter. ### Colour Customise everything about the colours used to display the solution. - #### Colour map Set the current colour map being used to convert **Expression** into a colour value. Use the dropdown to select from the available options. We have tried to cater for everyone in these options but, if you find that no colour map is available that allows you to easily distinguish between values, please let us know at [hello@visualpde.com](mailto:hello@visualpde.com) so that we can add a more appropriate map. - #### Min/Max value Set the limits of the colour map that transforms **Expression** into colour. If viewing a surface plot, this also impacts the height of the surface. These can depend on any quantities defined in **Parameters**. - #### Reverse Reverse the direction of the current colour map. - #### Colour bar Toggle the display of the current colour bar and limits. - #### Snap range Click to instantly snap **Min value** and **Max value** to the current minimum and maximum of **Expression** in the domain. - #### Auto snap Toggle the automatic snapping of the colour map limits. This can be very useful if you don't know the range in which **Expression** will fall, especially if it is changing frequently. ### Contours Toggle the rendering of contours on top of the simulation display. The number, colour, and sensitivity of these (equally spaced) contours can be configured in the **Contours** menu that appears when contours are enabled. - ##### Colour Specify the colour in which contours will be rendered. - ##### Number Specify the number of contour lines to plot. These are drawn at equally spaced intervals between the minimum and maximum of the current colourmap e.g. specifying one contour will draw a line at the midpoint of the colourmap. - ##### Threshold Set the relative numerical threshold, between 0 and 1, within which a contour will be detected. Smaller values result in more precise, thinner contours. Larger values may be needed to detect contours in solutions that vary rapidly in space. Under the hood, VisualPDE checks if a given output pixel is within this threshold of a given contour value, with all values normalised by the range of the colourbar. If the range of the colourbar is 0, the behaviour of contours is undefined. ### Lighting Toggle lighting effects, which adds reflections and shadows to the solution. This often adds a fluid-like character to a simulation, as can be seen in the [Visual Story on water waves](/visual-stories/ripples). We make use of the [Phong reflection model](https://en.wikipedia.org/wiki/Phong_reflection_model). Details of the filter, including its strength and the orientation of the simulated light, can be specified in the **Lighting** menu that appears when lighting is enabled. Some lighting effects may appear slightly pixellated on some devices (typically Android tablets and iPadOS devices), though increasing the grid refinement will mitigate this. - #### Smoothness Configure the simulated smoothness of the surface. Low values will result in sharp shadows and reflections, whilst larger values will produce an apparently smoother surface. - #### Ambient Set the level of background light, which does not contribute to reflections or shadows. - #### Diffuse Set how much the light source impacts on the brightness of the surface. - #### Specular Specify the intensity of specular (shiny) reflections. - #### Precision Set the precision (also known as the specular exponent) of the specular reflections. Low values widely scatter light, whilst large values result in precise highlights. - #### Inclination Set the angle of inclination of the light source. Setting this to 0 places the light source directly overhead. - #### Direction Specify the in-plane direction of the light source, rotating any shadows and highlights. ### Overlay Toggle the display of an overlay. The expression, colour, and threshold used in displaying the overlay can be specified in the **Overlay** menu that appears when the overlay is enabled. - #### Colour Specify the colour in which overlays will be rendered. - #### Expression Set an expression whose zero set defines a curve to be displayed in the domain. This can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), their gradients ($u_x$, $u_y$, etc.), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), and any quantities defined in **Parameters**. See our discussion of [valid expressions](#writing-valid-expressions) for valid syntax and a list of available in-built functions. - #### Threshold Set the relative numerical threshold, between 0 and 1, within which the zero set will be detected. Smaller values result in more precise, thinner curves. Larger values may be needed to detect curves in large spatial domains or for expressions that vary rapidly in space. Under the hood, VisualPDE checks if a given pixel is in the zero set to within this threshold. ### 3D options When viewing surface plots, this menu will appear to allow you to customise aspects of the display. - #### Custom surface Toggle the rendering of the solution on a custom, user-defined surface. The surface $z(x,y)$ is specified in **Surface $z$**, which appears when a custom surface is enabled. This definition can be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$) and their first derivatives, the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). - #### Height scale The scale factor used when plotting surfaces or lines. Changing this parameter effectively makes the vertical variation appear more/less prominent, though it does not alter the plotted colours. Must be a numerical value. - #### View $\\theta$/$\\phi$ [Euler angles](https://en.wikipedia.org/wiki/Euler_angles) specifying the current 3D viewpoint, with $\\theta\\in[0,\\pi]$ and $\\phi\\in[0,2\\pi]$. You can manipulate these values either by inputting new values, or see them update as you rotate the viewpoint with your pointer (click and drag). As Euler angles [don't do a perfect job](https://en.wikipedia.org/wiki/Gimbal_lock) of describing orientations, you may (rarely) find that a viewpoint loaded in from a URL isn't quite what you expected. - #### Zoom The current zoom level of the 3D view. You can manipulate the value directly or, on touch devices, by 'pinching to zoom'. ### Line options When viewing line plots, this menu will appear to allow you to customise aspects of the display. - #### Max height The maximum height of the plotted line, measured in units of $L$. Changing this parameter effectively makes the vertical variation appear more/less prominent. Must be a numerical value. - #### Thickness The thickness of the plotted line relative to the default. Must be a numerical value. ### Vector field Toggle the rendering of a vector field on top of the simulation. The definition, colour, density, and size of the vectors can be fully customised. This option is often used to visualise flows or fluxes. - #### Colour Specify the colour in which arrows will be rendered. - #### $x$, $y$ component Specify the $x$ and $y$ components of the vector field. These components can be functions of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$) and their first derivatives, the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). - #### Density Specify the density of the rendered arrows, normalised between 0 and 1. - #### Scaling Configure how the rendered arrows will be scaled. **_Relative_** normalises arrows relative to a maximum length that you can specify. **_Auto_** normalises arrows relative to the largest computed arrow at the current instant. **_None_** renders all arrows at the same scale. - #### Max length Specify the constant length by which all arrows will be normalised. Must be a mathematical expression that is not written in terms of any parameters or user-defined quantities. ### Time series Toggle the display of a live time series graph of the simulation. This can show either the value of the **Expression** at a single (configurable) position, or the integral of the expression over the domain. - #### Type Choose whether to plot a single-point sample or an integral of the configured **Expression**. - #### Expression Specify the expression to be sampled or integrated. This can be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$) and their first derivatives, the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). Boundary conditions may not be accurately reflected in computed values. - #### $x$, $y$ Specify the position at which to sample the **Expression**. This can be a function of time ($t$), any user-defined parameters, and the size of the domain ($L$, $L_x$, $L_y$). This can be automatically filled in using the button. - #### Duration Specify the length of the time series (in units of time). The series will be updated at regular intervals. For the best experience, this should be around 10-400 times the timestep times the number of timesteps per frame. --- ## Settings {{ layout.settings }} Here you can edit a wide range of settings, from the size of the brush to the timestep of the simulation. ### Brush VisualPDE allows you to interact directly with simulations via a brush by simply clicking/pressing on the domain. The brush paints values onto the discrete representation of the domain, which act like initial conditions for the rest of the simulation. - #### Enable brush Enable or disable the brush. Most simulations will have the brush enabled by default. - #### Type Change the shape of the brush, choosing between **Disk**, **Horizontal line** and **Vertical line**. A fourth option, **Custom**, allows you to define a custom shape in the **_Indicator_** field by typing in an expression. The brush will draw wherever the expression is positive. Expressions can be a function of space ($x$, $y$), the brush coordinates ($xB$, $yB$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), and the images ($I_S$, $I_T$). - #### Value Change the **value** that you are painting. This can be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$), the images ($I_S$, $I_T$), `RAND`, a uniformly random value in $[0,1]$, and `RANDN`, a normally-distributed random number with unit variance and zero mean. - #### Radius Change the brush size, measured on the same scale as the domain size. This can even be a function of space ($x$, $y$), time ($t$), any user-defined parameters, any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). - #### Species Set the **species** ($u$, $v$, $w$, $q$) you are painting. ### Domain - #### Dimension Choose between a 1D or a 2D computational domain. Switching to 1D effectively removes the $y$ dimension from the simulation. Make sure that any expressions you've defined don't contain a $y$ after moving to 1D. - #### Largest side Change the largest side $L$ of the domain. Must be a mathematical expression that is not written in terms of any other parameters or user-defined quantities. If this is not an integer multiple of the space step $\\dx=\\dy$, the domain will extend to $\\floor{L / \\dx}\\dx$ in practice. This guarantees the use of a precise space step. - #### Space step Set the space step $\\dx=\\dy$ used in discretising the domain. You may have to decrease the timestep $\\dt$ in order to maintain numerical stability if you decrease the space step (as discussed in the [timestepping guide](/user-guide/solver#timestepping)). Must be a mathematical expression that is not written in terms of any other parameters or user-defined quantities. - #### Min. $x$, $y$ Set the minimum values of $x$ and $y$ in the simulation. This amounts to translating the simulation domain by $(x_{min}, y_{min})$. A common use of this is to centre the simulation domain at $(0,0)$ rather than $(L_x/2, L_y/2)$. Can be a function of $L_x$, $L_y$ and any of the user-defined parameters. - #### Fill screen Choose between the domain filling the display (often recommended) or being forced to be square (vital for guaranteeing the shape of the domain). When selected, the largest edge of the display will correspond to the length set in **Largest side**, so that full-screen simulations can be thought of as cropped, zoomed counterparts to square simulations. - #### Custom Toggle the use of a custom domain $\\domain$ that is determined implicitly from a user-set expression. - #### Ind. fun (indicator function) Define the domain implicitly by setting a boolean (e.g. $x<0.5$) or a simple expression (e.g. $x-0.5$), where (strict) positivity identifies the interior of the domain. This can be a function of space ($x$, $y$), time ($t$), any of the unknowns ($u$, $v$, $w$, $q$), the size of the domain ($L$, $L_x$, $L_y$) and the images ($I_S$, $I_T$). In order to allow VisualPDE to correctly apply boundary conditions, the edge of the computational domain is always counted as being outside of the custom domain. ### Timestepping - #### Steps/frame Set how many timesteps will be performed every time your browser requests a frame from VisualPDE. This setting effectively allows you to speed up/slow down the simulation without altering the timestep, though large values may cause some stuttering on some devices. Must be a numerical value. - #### Timestep Set the timestep $\\dt$ used in the solver. You may have to increase the spatial step $\\dx$ in order to maintain numerical stability if you increase the timestep (as discussed in the [solver guide](/user-guide/solver)). Must be a numerical value. - #### Scheme Select one of various timestepping schemes. [Forward Euler](https://en.wikipedia.org/wiki/Euler_method) is the fastest but least accurate; the [Midpoint Method](https://en.wikipedia.org/wiki/Midpoint_method) and [Runge-Kutta 4](https://en.wikipedia.org/wiki/Runge–Kutta_methods) improve upon the accuracy and stability of Forward Euler, though are associated with increased computational cost. [Adams-Bashforth 2](https://en.wikipedia.org/wiki/Linear_multistep_method#Two-step_Adams–Bashforth) is more accurate but less stable than Forward Euler. Use of higher accuracy schemes may require a reduction of Steps/frame to reduce stuttering due to increased computational load. When solving stochastic partial differential equations, only Forward Euler is supported. - #### Elapsed time Show/hide the elapsed time since the simulation was loaded/reset. - #### Auto pause Set the simulation to be automatically paused when the time ($t$) passes a custom threshold, which can be configured when this option is enabled. You can resume an auto-paused simulation by pressing {{ layout.play }} - #### Performance mode Reduces the quality of the display in order to boost simulation performance. Different simulations and devices will benefit differently from this setting. On average, we see an increase of around 6fps on a Mac Mini M1 on the 'BenchmarkingFast' preset in 4K resolution. ### Images - #### $I_S$, $I_T$ Define the scalar fields $I_S$ and $I_T$, which are derived from images that you can upload by clicking on the current image. Via the symbols `I_S` and `I_T` throughout VisualPDE, you can access the average RGB value of each image at each point in space, effectively treating them as greyscale. Advanced users can access the individual RGBA channels via `I_SR`, `I_SG`, etc. VisualPDE will stretch images so that they cover the domain edge-to-edge. Note that this does not respect **Implicit**. The defaults draw from images of [Sofya Kovalevskaya](https://en.wikipedia.org/wiki/Sofya_Kovalevskaya) and [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing). ### Checkpoints VisualPDE supports checkpoints, which allow you to save the state of a simulation at the touch of a button. This allows you to instantly return to a previous solution state - very handy if you've crafted the perfect initial condition by painting with the brush. Revert to a checkpoint by pressing {{ layout.restart }} - #### Enable checkpoints Toggle the use of checkpoints. When enabled, resetting the simulation will revert to a saved checkpoint (if one exists) instead of using any initial conditions defined alongside the equations. - #### Set Save the current simulation as a checkpoint. - #### Export Click to export the last checkpoint as a file to your device, which can be shared and uploaded to the site and used as a checkpoint. If no checkpoint exists, one will be created. By default, the file will be called `VisualPDEState`. - #### Import Import a checkpoint from a VisualPDE file. By default, these are called `VisualPDEState`. - #### Resize Specify how a checkpoint should be resized to fit the current simulation domain. 'Stretch' will stretch the checkpoint so that it fills the current domain, but will not preserve the aspect ratio in general. \"Crop\" will crop the checkpoint whilst preserving the aspect ratio, but may result in some information not being used. ### Misc - #### Background Set the background colour of the simulation window, which you will see often when using **Surface Plot** or **Implicit**. In implicit domains, the exterior of the domain adopts this colour. - #### Integrate Display the integral of **Expression** over the domain. This integral is coarsely approximated by a simple Riemann sum, with accuracy improving with mesh refinement. This can be used to track the numerical evolution of quantities that should be conserved in a system. - #### Interpolate Use this option to force the use of manual, unoptimised filtering in place of device-default interplation of displayed colours. This toggle is not available on devices that do not support interpolation by default; in this case, manual interpolation is always enabled. - #### Set seed Set the seed of the (pseudo)random number generator used to assign values to `RAND` and `RANDN` in all free-text fields in the VisualPDE interface. Note that `RAND` and `RANDN` always vary in space. A specific random seed in the form of a numerical value can be configured (default 0). - #### Clean slate Load into a blank simulation, discarding everything. Useful for creating new simulations. - #### Ghost BCs Toggle the availability of `ghost' boundary conditions in the GUI. - #### Dev Tools intended for the development and benchmarking of VisualPDE. ***Copy code*** will copy a verbose description of your simulation in JSON form, which is especially useful if you're extending VisualPDE with your own examples. It will base the example on the selected 'parent' preset, which can be useful if you're making multiple slightly different versions of a simulation. ***Copy debug*** will copy a selection of configuration information to your clipboard (handy when reporting bugs). ***Show stats*** will toggle the display of performance statistics in the lower left corner of the display. We use this to benchmark performance impacts of new features and optimisations. ***Antialias*** will toggle the use of antialiasing when displaying the simulation. Antialiasing in VisualPDE smooths out the jagged edges of displayed vector fields, though always causes a slight device-dependent performance loss. This is off by default for mobile devices, but can be overridden. Toggle requires a page reload. ***Mixed strings*** will toggle the visibility of verbose strings associated with mixed boundary conditions. These are off by default, but can be useful for advanced cases such as simultaneously imposing Dirichlet and Neumann conditions. --- ## Writing valid expressions ### Standard syntax VisualPDE aims to support standard mathematical syntax for addition `+`, subtraction `-`, multiplication `*`, and division `/`, along with the caret notation `^` for exponentiation. Parentheses `()` are also supported for bracketing terms together, and must be used when calling any special functions. In general, whitespace around binary operators will be ignored, so that `2 * 2` is valid syntax for multiplication, for example. Quantities with subscripts, such as $L_x$ and $L_y$, are written with an underscore, e.g. `L_x` and `L_y`. Boolean expressions (e.g. `x < 0`) can be used as indicator functions by surrounding them with the function `ind` (e.g. `ind(x < 0)`). Examples of valid syntax include ``` sin(x) * cos(3*y) exp( -(x-L_x)^2 / 10) 1 + (x^2 + x + 1) / (y^2 + 2*y + 1) sin(cosh(tan(2*x+1))) ``` ### Advanced syntax Some terms in VisualPDE have additional functionality when written with special syntax. #### Images By default, images are accessed using `I_T` and `I_S`, with individual channels available by appending R,G,B or A. When a channel is specified, you can access images using coordinates using the syntax `I_TR(x,y)`. Examples include ``` I_TR(2*x, y) I_SB(x-t, y-t) I_TG(x, y + sin(u)) ``` #### First derivatives First derivatives in space, accessed with `u_x`, `u_y`, ..., are computed using a central finite difference discretisation by default. By appending `f` or `b` to the subscript, such as `u_xf`, you can tell VisualPDE to use a forward or a backward difference, respectively. Forward differences sample the solution at increased $x$ (or $y$), whilst backward differences sample at decreased $x$ (or $y$). These specialised schemes can be used in [upwind schemes](https://en.wikipedia.org/wiki/Upwind_scheme) and often reduce numerical artefacts, but at the expense of typically larger numerical error. Forward and backward differences can also be computed with second-order numerical schemes by appending `2` to the subscript, though in general this will only respect Periodic boundary conditions in the direction of the derivative. This syntax can only be used in the **Edit** section of **Equations**. ### Special functions Throughout VisualPDE, you can make use of the special functions `sin`, `cos`, `tan`, `exp`, `log`, `sqrt`, `sinh`, `cosh`, `tanh` and `H`, where the latter is a [Heaviside function](https://en.wikipedia.org/wiki/Heaviside_step_function) smoothed over the interval $[-1,1]$ (see the [GLSL reference](https://registry.khronos.org/OpenGL-Refpages/gl4/html/smoothstep.xhtml) for details). All function arguments should be surrounded by parentheses, e.g. `sin(x)`. You can also use `min` and `max` as functions with two arguments, which return the minimum or maximum of their arguments, e.g. `min(u,1)` returns the minimum of $u$ and 1. If you wish to raise the output of a function to a power, you must enclose the function in parentheses, e.g. write `(cos(x))^2`, not `cos(x)^2`. A [bump function](https://en.m.wikipedia.org/wiki/Bump_function) with compact support can be used via the syntax `Bump(X, Y, radius)` (or `Bump(X, radius)` in 1D), which localises a bump of unit maximum of the given radius at the point $(X, Y)$. A [bivariate Gaussian function](https://en.wikipedia.org/wiki/Multivariate_normal_distribution) can be used with similar syntax to the bump function: `Gauss(X, Y, s)` is a correctly normalised Gaussian function centred at $(X,Y)$ with standard deviation `s`. The extended syntax `Gauss(X, Y, s_x, s_y)` produces a potentially asymmetric Gaussian with standard deviations `s_x` and `s_y` in the $x$ and $y$ directions, with zero correlation. Correlation can be specified via `Gauss(X, Y, s_x, s_y, r)`, where `r` is the correlation between the two directions. ### Non-local evaluation Sometimes, you might want direct access to the values of a species at points other than `(x,y)`, such as if you wanted to implement a higher order derivative or a lattice dynamical system. You can access a species (e.g. `u`) at an arbitrary position via the syntax `u[x,y]`, where `x` and `y` can be any valid expression that points to somewhere in the domain. For instance, writing `u[x+dx,y+dy] - u[x-dx,y-dy]` will lookup nearby values of `u`, offset by the step sizes `dx` and `dy`. The behaviour of non-local evaluations using these expressions is undefined at boundaries (so that Neumann boundary conditions may not behave as expected, for instance), unless periodic boundary conditions are used.","url":"/user-guide/advanced-options","tags":"","equation":"","img":"/assets/images/Brusselator.webp","page_number":20,"id":47},{"layout":"page","title":"Quick start","lesson_number":10,"thumbnail":"/assets/images/start.webp","extract":"Two-minute top tips","body":"VisualPDE is a web-based set of tools for solving partial differential equations (PDEs) via an interactive, easy-to-use simulation. To get started, try playing with some of the [linear examples](/explore#linear), or read on for some quick tips for using the solver. ### Interacting with the simulation Clicking/pressing on the simulation draws values right onto the domain. You can customise exactly what this does under {{ layout.settings }} → **Brush** For example, the default settings in the [heat equation example](/basic-pdes/heat-equation) allow you to paint 'heat' of value 1 onto the domain, which acts like an initial condition for the rest of the simulation. ### The equations panel Pressing {{ layout.equations }} opens up the **equations panel**. {:refdef: style=\"text-align: center;\"} ![Equations panel](/assets/images/equations-panel.webp){: width=\"253px\" border=\"1px black\"} {: refdef} Here you can: * See the [equation being simulated](#equations), here $\\pd{u}{t} = \\vnabla\\cdot(D_u\\vnabla u) + f_u$. * Set the named functions in the equations, here $D_u$ and $f_u$, under **Definitions**. These can be functions of any of the unknowns, space, and time (here $u$, $x$, $y$, and $t$), and of any parameters that will be defined further down the panel. * Set the value of any extra parameters. * Set the [boundary conditions](#boundary-conditions). * Set the [initial conditions](#initial-conditions). * Set the [number and type of equations](#changing-the-equations-) to be solved. ### Domain shape The default **domain** for solving PDEs is a 2D rectangle, $\\domain = [0,L_x]\\times[0,L_y]$, which fits the size of your browser window or phone screen. Throughout VisualPDE, we use coordinates $x\\in[0,L_x]$ and $y\\in[0,L_y]$. You can force the domain to be a square, $\\domain = [0,L]\\times[0,L]$, by toggling off {{ layout.settings }} → **Domain** → **Fill screen** ### Boundary conditions The following **boundary conditions** are available to allow you to set the value of the function, or the value of its derivative, along the boundary $\\boundary$ of the domain $\\domain$: * Periodic * [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition) (e.g. $u\\onboundary = 0$) * [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition) (e.g. $\\pd{u}{n}\\onboundary = 0$) * [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition) (e.g. $(u + \\pd{u}{n})\\onboundary = 0$) You can swap between boundary conditions by choosing {{ layout.equations }} → **Boundary conditions** and selecting from the list for each variable. ### Initial conditions You can specify the values to which the unknowns ($u$, $v$, $w$) are initialised when resetting the simulation. These expressions can be functions of $x$, $y$, the special string 'RAND' that assigns a random number in [0,1] to each point in the domain, along with any user-defined parameters and the images $I_S$ and $I_T$ (see the [advanced documentation](/user-guide/advanced-options) for more details). You can also use $L$, $L_x$ and $L_y$. ### Changing the equations The simplest system VisualPDE can solve is a single PDE, $$\\pd{u}{t} = \\vnabla \\cdot (D_u \\vnabla u) + f_u,$$ where $D_u$ and $f_u$ are functions of $u$, $x$, $y$, and $t$ that you can specify. The most complicated type is a coupled system of PDEs in four unknowns, $u$, $v$, $w$ and $q$: $$\\begin{aligned} t_u\\pd{u}{t} &= \\vnabla \\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v+D_{uw}\\vnabla w+D_{uq}\\vnabla q) + f_u,\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_v\\pd{v}{t} \\\\ v\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v \\vphantom{\\displaystyle t_v\\pd{v}{t}}, \\\\ &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v, \\end{aligned}\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_w\\pd{w}{t} \\\\ w\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{ww}\\vnabla w+D_{wq}\\vnabla q) + f_w \\vphantom{\\displaystyle t_w\\pd{w}{t}}, \\\\ &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{wq}\\vnabla q) + f_w, \\end{aligned}\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_q\\pd{q}{t} \\\\ q\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w+D_{qq}\\vnabla q) + f_q \\vphantom{\\displaystyle t_q\\pd{q}{t}}, \\\\ &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w) + f_q, \\end{aligned} \\end{aligned}$$ where $D_{uu}, \\dots, D_{qq}$, $f_u, \\dots, f_q$ and $t_u, \\dots, t_q$ are functions of $u$, $v$, $w$, $q$, $x$, $y$ and $t$ that you can specify. * You can change the number of unknowns by choosing {{ layout.equations }} → **Advanced options** → **Num. species** * In systems of multiple unknowns, you can include terms representing cross-diffusion (e.g. $D_{uv}$, $D_{vu}$) by toggling {{ layout.equations }} → **Advanced options** → **Cross diffusion** * In systems of multiple unknowns, you can choose between a differential or algebraic equation for some of the species (e.g. '$\\partial w/\\partial t=$' or '$w=$') by toggling {{ layout.equations }} → **Advanced options** → **Algebraic w** (or **v** or **q**) ### More VisualPDE For a comprehensive list of all the options that you can set in VisualPDE, check out the [Advanced documentation](/user-guide/advanced-options), or discover what VisualPDE can solve in our brief [summary](/user-guide/what-can-visualpde-solve). ","url":"/user-guide/quick-start","tags":"","equation":"","img":"/assets/images/start.webp","page_number":10,"id":48},{"layout":"page","title":"The VisualPDE solver","lesson_number":40,"thumbnail":"/assets/images/UnderTheHood.webp","extract":"Under the hood of VisualPDE","body":"VisualPDE aims to be a plug-and-play, browser-based solver and visualiser for a range of PDE systems, with as few barriers to entry as possible. Underneath what we hope is a polished exterior, we've made a number of somewhat technical choices to enable interactive and reliable solution across as many devices as we can support. To explain these choices, and because we like knowing what's going on inside any software we use, we've compiled a short summary of how VisualPDE works under the hood. This is accompanied by a more detailed account in an [open access article](https://doi.org/10.1007/s11538-023-01218-4). We are always looking for ways to improve and extend VisualPDE, especially ways of reaching a broader audience and new communities. If you have any questions or suggestions about anything related to VisualPDE, we'd love to hear from you at [hello@visualpde.com](mailto:hello@visualpde.com)! ### The equations VisualPDE can solve a variety of PDE systems posed in 1D or 2D space, many of which are straightforward extensions of the two-species reaction–diffusion system, $$ \\begin{aligned} \\pd{u}{t} &= \\vnabla \\cdot(D_u\\vnabla u) + f_u,\\\\ \\pd{v}{t} &= \\vnabla \\cdot(D_v\\vnabla v) + f_v. \\end{aligned} $$ Here, $u$ and $v$ are the scalar unknowns that we solve for, $t$ is time, and the divergence and gradient operators are the usual spatial operators in a 2D Euclidean domain. In general, the interaction/kinetic terms ($f_u$ and $f_v$) and the diffusion coefficients ($D_u$ and $D_v$) can each be functions of time, space, and the unknowns, though we often don't explicitly write these potential dependencies. See this [help page](what-can-visualpde-solve) for a comprehensive summary of the types of PDEs that VisualPDE can solve. ### The domain A PDE problem is not well-posed without specifying a domain (or [boundary conditions](#boundary-conditions)). We typically determine the domain $\\domain$ from the size of your device, fixing the largest side to be of length $L$. You can demand a square domain with aspect ratio 1:1 by toggling {{ layout.settings }} → **Domain** → **Fill screen** However, not all domains are rectangular. To accommodate this, VisualPDE allows you to specify an arbitrary domain via a [level set](https://en.wikipedia.org/wiki/Level-set_method) or [indicator function](https://en.wikipedia.org/wiki/Indicator_function) approach, under {{ layout.settings }} → **Domain** → **Implicit** To make this work in practice, VisualPDE uses this user-specified function to determine which parts of $\\domain$ to include in the simulation, though this prevents you from specifying boundary conditions that include derivatives (computing normals to user-specified curves is not something we wanted to think about). You can specify a boolean (e.g. $x<0.5$) or a simple expression (e.g. $x-0.5$), where (strict) positivity identifies the interior of the domain. You can even use images in this expression, allowing you to define complicated domains with ease. ### Spatial discretisation We take $\\domain$ and divide it into a square grid with a user-configurable spacing. Be warned: the only limit to this spacing is your imagination/hardware, so taking a spatial step of $\\dx=10^{-9}$ is unlikely to be a good idea... We use this grid in a [finite difference](https://en.wikipedia.org/wiki/Finite_difference_method) scheme to approximate the spatial operators in our system. If $D_u$ and $D_v$ were simply constants, as they were when we began the development of VisualPDE, a standard [central differences](https://en.wikipedia.org/wiki/Discrete_Laplace_operator) discretisation of the resulting Laplacian $\\nabla^2$ would suffice. However, as these coefficients generally vary in space, we employ a similar but necessarily more complex scheme. Explicitly, using $\\vnabla \\cdot(D_u\\vnabla u)$ as an example and limiting ourselves to 1D for brevity, we approximate $$\\textstyle \\vnabla \\cdot(D_u\\vnabla u) \\approx \\frac{D_u(x-\\dx)[u(x-\\dx) - u(x)] + D_u(x)[u(x-\\dx) - 2u(x) + u(x+\\dx)] + D_u(x+\\dx)[u(x+\\dx) - u(x)]}{2\\,\\dx^2}$$ at a point $x$, where we've omitted any dependence of any quantities on anything other than space. Notably, this is just a standard central differences scheme if $D_u$ is constant. Adding the above to itself with $x$ replaced with $y$ gives the 2D discretisation, and adding in additional terms is simple by linearity. ### Timestepping With space discretised as above, we are faced with a large system of coupled ordinary differential equations to solve, which represent the evolution of the unknowns at each discrete gridpoint of the spatial domain. VisualPDE implements four popular schemes for timestepping: [Forward Euler](https://en.wikipedia.org/wiki/Euler_method), two-step [Adams-Bashforth](https://en.wikipedia.org/wiki/Linear_multistep_method#Two-step_Adams–Bashforth), the [Midpoint Method](https://en.wikipedia.org/wiki/Midpoint_method) and the four-step [Runge-Kutta](https://en.wikipedia.org/wiki/Runge–Kutta_methods) method (commonly known as 'RK4'). These solvers each have their strengths, with Forward Euler being the least computationally demanding while RK4 offers superior accuracy and stability at the cost of doing more calculations each timestep. The following Forward Euler scheme is the default in many of the examples on the site: $$ \\pd{u}{t} \\approx \\frac{u(t+\\dt) - u(t)}{\\dt}$$ for timestep $\\dt$. This approach is far from state-of-the-art, but it is straightforward and intuitive to implement on massively parallel computing hardware (more on that [later](#browser)). In practice, its simplicity can lead to some problems, with [numerical instability](https://en.wikipedia.org/wiki/Euler_method#Numerical_stability) being perhaps the most pathological. Loosely speaking, the interaction between the forward Euler scheme and our spatial discretisation can lead to numerical artefacts ruining the solution, which typically occur when the ratio $D \\, \\dt / \\dx^2$ is too small, where $D$ is any of the diffusion coefficients in the problem. Both the Midpoint Method and RK4 improve upon the stability of Forward Euler, whilst the Adams-Bashforth scheme is generally less stable but more accurate than Forward Euler. VisualPDE will try to tell you when it's fallen foul of stability issues (we periodically check for 'NaN' or $\\pm\\infty$ in the solution), at which point you might want to try reducing $\\dt$, trying out a different solver, reducing the diffusion coefficients in your problem, or increasing $\\dx$ (we recommend trying each of these things in this order). If you want to experience this for yourself for Forward Euler, try clicking in [this](/sim/?preset=unstableHeatEquation) simulation. It turns out that only RK4 will make this simulation stable due to the relative size of the diffusion coefficient, timestep $\\dt$ and spatial step $\\dx$, which you can see for yourself by switching the timestepping scheme. Despite each of our solvers having their limitations, these schemes have enabled VisualPDE to efficiently solve every system that we've thrown at it, though some tuning of the timestep can be necessary in extreme cases. If you have any tips for implementing alternative schemes (especially anything implicit), we'd love to hear from you! ### Boundary conditions VisualPDE implements four types of boundary condition: periodic, [Dirichlet](https://en.wikipedia.org/wiki/Dirichlet_boundary_condition), [Neumann](https://en.wikipedia.org/wiki/Neumann_boundary_condition), and [Robin](https://en.wikipedia.org/wiki/Robin_boundary_condition). As each of these are slightly different in character, we briefly describe the general form of each condition that can be used in VisualPDE, along with notes on how this is enforced in the simulation. We pose these conditions as if they correspond to the scalar [heat equation](/\\_basic-pdes/heat-equation) in 2D. #### Periodic Periodic boundary conditions, where $u(x+L_x,y)=u(x,y)$ etc, are the simplest to implement. If our spatial discretisation is attempting to sample a function outside of $\\domain$, we simply map its argument back to $\\domain$ by shifting by $L_x$ or $L_y$. #### Dirichlet Dirichlet boundary conditions take the form $u\\onboundary = a(x,y,t)$ for a user-specified function $a$. These are easy to enforce, as we simply override our usual timestepping for any nodes on the boundary of the domain. If the user has chosen to use an implicitly defined domain, we assign $a(x,y,t)$ to all points outside of $\\domain$. #### Neumann Neumann boundary conditions are specified as $\\pd{u}{n}\\onboundary = a(x,y,t)$ for a user-specified function $a$, where $\\pd{u}{n}$ denotes a derivative in the direction of the (outward-pointing) normal to the boundary. Implementing a Neumann boundary condition is done via so-called **ghost nodes** in our discretisation. For instance, enforcing $\\pd{u}{n}\\onboundary = 0$ at the left-most $x$ boundary of a rectangular domain is achieved in practice by taking $$\\textstyle u(x-\\dx,y) = u(x+\\dx,y)$$ in the [finite difference operator](#spatial-discretisation) described above. #### Robin Robin boundary conditions are a natural combination of Dirichlet and Neumann conditions, which we pose in the form of a generalised Neumann condition $\\pd{u}{n}\\onboundary = a(u,x,y,t)$, where the right-hand side can now depend on $u$ (and any other unknown in multi-species systems). These conditions are also implemented with ghost nodes. For example, enforcing $\\pd{u}{n}\\onboundary = u\\onboundary$ at the leftmost $x$ boundary of a rectangular domain is achieved in practice by taking $$\\textstyle u(x-\\dx,y) = u(x+\\dx,y) + 2 u(x,y)\\,\\dx$$ in the [finite difference operator](#spatial-discretisation) described above, approximating the derivative at the boundary with a simple central difference. #### Combined VisualPDE also allows you to specify different boundary conditions on different parts of the boundary. Doing this requires some special syntax, as detailed in the [advanced documentation](/user-guide/advanced-options#boundary-conditions). ### Doing this in your browser, quickly Solving PDEs is hard. To solve them in real time in your browser, VisualPDE gives all the hard work to the graphics chip (GPU) on your device, making use of [WebGL](https://en.wikipedia.org/wiki/WebGL) and a low-level shader language called [GLSL](https://en.wikipedia.org/wiki/OpenGL_Shading_Language). Every time your browser requests a frame from VisualPDE (which might be up to 60 times per second), some [JavaScript](https://en.wikipedia.org/wiki/JavaScript) organises the solving of the discretised equations, displaying the solution, and incorporating anything you've drawn, which all happen on the GPU. Each frame, we typically perform hundreds of timesteps to give you a smooth experience, mitigating many of the limitations of our [timestepping schemes](#timestepping). If you're interested in the finest details of the implementation, the source code for the entire site is freely available to view, reuse, and repurpose on [GitHub](https://github.com/Pecnut/visual-pde). ### Accuracy and precision VisualPDE hopes to be as accurate as possible whilst providing a responsive, visual, portable platform for solving PDEs. In most systems, the timestep, timestepping scheme and spatial discretisation will be the main source of any errors, as you'd expect from finite-difference discretisations of PDEs. Naturally, smaller timesteps, higher order timestepping schemes and refined spatial discretisations will often improve the accuracy of the solution, but each will incur additional computational costs. With VisualPDE, you can choose the balance that works best for you (and potentially your audience). A more subtle limit on the accuracy of VisualPDE is our use of single-precision arithmetic, something we've inherited from the libraries we use and the capabilities of modern hardware. We'll be moving to double-precision computation as soon as we can to maximise the accuracy of VisualPDE. In the meantime, rest assured that single-precision arithmetic is sufficient for capturing a wide range of phenomena, including those explored in our examples, but keep this caveat in mind when seeking to find precise quantitative answers to PDE problems. ","url":"/user-guide/solver","tags":"","equation":"","img":"/assets/images/UnderTheHood.webp","page_number":40,"id":49},{"layout":"page","title":"What can VisualPDE solve?","lesson_number":30,"thumbnail":"/assets/images/squirrel-question.webp","extract":"A brief intro to the systems we simulate","body":"VisualPDE solves systems of PDEs that look like generalised reaction--diffusion equations. It can do this in 1D or 2D. The simplest type of system is just a single PDE in a single unknown, $u$, $$\\pd{u}{t} = \\vnabla \\cdot (D_u \\vnabla u) + f_u,$$ where $D_u$ and $f_u$ are functions of $u$, $t$, and space that you can choose. For example, if $f_u=0$ and $D_u$ is a constant, you have [the heat equation](/basic-pdes/heat-equation). The most complicated type is a coupled system of PDEs in four unknowns, $u$, $v$, $w$ and $q$: $$\\begin{aligned} t_u\\pd{u}{t} &= \\vnabla \\cdot(D_{uu}\\vnabla u+D_{uv}\\vnabla v+D_{uw}\\vnabla w+D_{uq}\\vnabla q) + f_u,\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_v\\pd{v}{t} \\\\ v\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vv}\\vnabla v+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v \\vphantom{\\displaystyle t_v\\pd{v}{t}}, \\\\ &= \\vnabla \\cdot(D_{vu}\\vnabla u+D_{vw}\\vnabla w+D_{vq}\\vnabla q) + f_v, \\end{aligned}\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_w\\pd{w}{t} \\\\ w\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{ww}\\vnabla w+D_{wq}\\vnabla q) + f_w \\vphantom{\\displaystyle t_w\\pd{w}{t}}, \\\\ &= \\vnabla \\cdot(D_{wu}\\vnabla u+D_{wv}\\vnabla v+D_{wq}\\vnabla q) + f_w, \\end{aligned}\\\\ \\text{one of}\\left\\{\\begin{matrix}\\displaystyle t_q\\pd{q}{t} \\\\ q\\end{matrix}\\right. & \\begin{aligned} &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w+D_{qq}\\vnabla q) + f_q \\vphantom{\\displaystyle t_q\\pd{q}{t}}, \\\\ &= \\vnabla \\cdot(D_{qu}\\vnabla u+D_{qv}\\vnabla v+D_{qw}\\vnabla w) + f_q, \\end{aligned} \\end{aligned}$$ where the diffusion coefficients ($D_{uu}$ etc.), the timescales ($t_u$ etc.) and the interaction/kinetic terms ($f$, $g$, $h$, $j$) can depend on the unknowns, space, and time. In matrix form, we can summarise this by saying we solve systems of the form $$\\m{M} \\pd{\\v{u}}{t} = \\vnabla\\cdot(\\m{D}\\vnabla\\v{u}) + \\v{f},$$ where * $\\v{u}$ is a vector of one, two, three or four unknowns, * $\\m{M}$ is a diagonal matrix with potentially some zeros on the diagonal; you might know this as a 'mass matrix', * $\\m{D}$ is a possibly non-constant matrix that may contain zeros; you might know this as a 'diffusion tensor', * $\\v{f}$ is a vector of one, two, three or four components that contains our interaction or kinetic terms. VisualPDE allows you to easily change the [number of components](quick-start#equations-panel) and the [boundary conditions](quick-start#boundary-conditions). You can set initial conditions just by clicking the screen. ","url":"/user-guide/what-can-visualpde-solve","tags":"","equation":"","img":"/assets/images/squirrel-question.webp","page_number":30,"id":50},{"layout":"page","title":"Virus transmission","lesson_number":20,"thumbnail":"/assets/images/VirusTransmission.webp","extract":"Visualising airborne infections","equation":"","categories":["visual stories"],"body":"Since the Covid-19 pandemic began, airborne viruses have formed a large part of scientific study. In this short Story, we're going to explore one aspect of this work: the effects of airflow. Before we begin, it's worth noting that the results of the simulations in this Story aren't meant to match up perfectly with reality, so we'll focus on qualitative features rather than on particular values. At the end of our exploration we'll point you towards the full science behind this Story, which includes discussions of the assumptions behind the mathematical model that inspired our Story. Suppose that lots of people are sitting in a sealed room and one of them is infectious. We'll assume that the infectious person is constantly producing virus-laden particles that spread out around them and lose their potency over time. The simulation below shows what this might look like. The colour corresponds to the concentration or amount of the virus in the air. With VisualPDE, we're not just limited to watching a simulation: we can interact with it too. Clicking in the room will introduce some viral particles to the air, as if someone with an infection had coughed (coughing is actually a lot more complicated and is the focus of lots of [research](https://doi.org/10.1146/annurev-fluid-060220-113712)). Try clicking to see what difference a cough can make. Though each cough introduces some virus to the room, it looks like it quickly decays away until we can't even tell it was there. So, does this mean we shouldn't be worried about a cough? # Catching the virus To explore this further, let's look at the probability (or chance) of getting an infection, which is related but not equal to the virus concentration. Specifically, we'll look at the chance of catching the virus assuming that you'd been in the same location for the duration of the simulation. With VisualPDE, we can do this by switching to the Probability View by pressing {{ layout.views }} and choosing 'Probability'. Here, the probability of being infected is large close to where we know the source of the infection is, right in the middle of the room. If you clicked in the room to simulate a cough, you should also see some high probabilities elsewhere. This shows that, even though the viral particles seem to disperse quickly after a cough, they make a significant difference to the probability of catching an infection near to the cougher. As you might expect, the probability of being infected increases with the amount of time that you're exposed to the virus. This time-dependent effect is especially visible when you click to cough while using the Probability View. To reset the simulation and see this clearly, press {{ layout.erase }}. What do you think will happen if you cough multiple times in the same spot? Test out your prediction with VisualPDE! # Recirculation It's fairly rare for air to stay still. Let's see what effect the movement of air can have on the distribution of a virus and the chance of infection. In the simulation below, we've added in the effects of the air being blown from left to right, mimicking an air conditioner, with anything that reaches the right-hand side of the room being blown back over everyone's heads before being recycled back into the left-hand side. With this new air movement, it now looks like standing downwind of the infected person is a bad idea: particles carrying the virus are swept from left to right by the air current, and the probability of being infected is much higher on the right of the infected person. Eventually, the recirculation of the air means that viral particles reach even the left-hand side of the room, leading to a large zone in the room where the probability of infection is high. Remember, you can swap between Views to see the effects on both probability and concentration. Try clicking while viewing the concentration to really see how the air drives the spread of the virus in one direction then blows it back from right to left, recirculating the virus over the room. This is in stark contrast to the behaviour of a cough in the earlier flow-free room. Explore further by changing the direction of airflow using the slider beneath the simulation. # A meandering infection People don't always stay still in the middle of rooms. Unsurprisingly, the movement of an infected individual can have a big impact on the spread of a virus. In the next simulation, we've set it up so that the source of the infection moves around the room, as if they were a waiter going between tables in a restaurant, perhaps. We've also turned off the air conditioner, so that the air in the room is still. The Probability View shows the build-up of a ring of likely infections as the infectious person circles the room. A quick look at the Concentration View shows their circular path, leaving a trail of viral particles behind them. In this scenario, what do you think happens if we turn on the air conditioner? The next simulation does just this. Start the simulation by pressing {{ layout.play }} Now, instead of a nice clean ring of likely infections, we immediately see that people on the downwind side of the room are much more likely to be infected – people that had a lower chance of infection in a room with no air circulation. If we keep watching, we can see this effect increasing and increasing. Eventually, even those that seemed to be far upwind of the source of infection have some chance of being infected, as the recirculating air slowly carries the virus with it across the room, just like it did in our earlier example. Finally, we can look at the Concentration View to see how the airflow is breaking not only the left–right symmetry of the room, but also the up–down symmetry. What do you think would happen if we reverse the direction that the waiter is circling the room? How would the picture change? Try changing the speed and direction of the airflow by dragging the slider found below the simulation to further explore the impact of flow. # Epilogue The story of airborne infections is far from over, but our viral Visual Story has reached its end. Using nothing more than your browser and your curiosity, we've explored how airflow might alter the spread of an airborne virus, witnessed the transient and long-term effects that a simple cough can have, and seen the potentially superspreading effects of a wandering waiter. As with all our Stories, it is worth remembering the limitations of what we've learned. Our approach has knowingly ignored lots of factors that could be very important, including the potentially vast differences that can exists between different viruses and between different environments. So, while we've hopefully gained lots of intuition, we would do well to take our conclusions with a healthy pinch of salt. # Looking for more? Not quite had enough of exploring airborne infections? You can play around with the speed of the air by opening our [customisable simulation](/sim/?preset=CovidInARoomCircling&runningOnLoad=true&activeViewInd=1) and moving the top-most slider that can be found under {{ layout.equations }} → **Parameters** and beneath the label beginning with 'V'. Try exploring how the air speed impacts the spread of the virus. For the science behind this Story, we recommend that you check out the [research](https://doi.org/10.1098/rspa.2021.0383) of Zechariah Lau, [Ian Griffiths](https://people.maths.ox.ac.uk/griffit4/) (University of Oxford), [Aaron English](https://twitter.com/aaronenglish001) (University of Parma), and [Katerina Kaouri](https://profiles.cardiff.ac.uk/staff/kaourik) (Cardiff University) on modelling the Covid-19 pandemic, which forms a basis for the mathematical models that we've just explored with VisualPDE. During the pandemic, they used similar models to provide recommendations to policymakers. We recommend checking out their [airborne virus risk calculator](https://people.maths.ox.ac.uk/griffit4/Airborne_Transmission/index.html), which inspired this Visual Story. Enjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com). Looking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from the [VisualPDE library](/explore). ","url":"/visual-stories/airborne-infections","tags":["visual stories"],"img":"/assets/images/VirusTransmission.webp","page_number":20,"id":51},{"layout":"page","title":"Cleaning up contaminants","lesson_number":30,"thumbnail":"/assets/images/Decontamination.webp","extract":"Chemical decontamination in porous media","equation":"","categories":["visual stories"],"body":"In this Story, we'll explore removing a contaminant from within a porous material by neutralising it in a chemical reaction. For example, the contaminant might be a hazardous liquid chemical that has seeped into a porous building material like concrete. We'll keep safe while doing this by making use of VisualPDE simulations to explore what happens. To decontaminate materials in practice, we often apply a cleaning chemical to the surface of the concrete, and wait while it diffuses down into the concrete and neutralises the hazardous contaminant. It’s crucial to react away *all* the contaminant. Here, we'll say the decontamination is complete when there is no contaminant left anywhere in the material, which will correspond to the simulations going completely white. # How long does it take? The time taken to complete a decontamination depends on many things, including: * properties of the chemical, such as the chemical reaction rate, * physical parameters, including how deep the spill is, how saturated the material is, and how quickly the cleaning chemical can diffuse through the porous material to reach the contaminant. The simulation below lets us explore the effect of one of these factors: the chemical reaction rate, which we'll call $k$. Clicking in the simulation adds a blob of cleansing chemical into the material. In reality, this is usually applied just to the upper surface (indicated by a thick black line), but here we can play around and add chemical to wherever we like. Try clicking to introduce cleanser, and watch as the green contaminant is cleaned up. At any time, you can reset the simulation by pressing To explore the role that the reaction rate plays, try adjusting the slider found just above the simulation, and see what effect clicking has now. For larger rates, the reaction is faster, and this speeds up the overall decontamination of the concrete. However, there’s a limit to how much we can speed it up by just varying this one parameter: for very large $k$, the speed of cleaning is controlled by the rate of transport in the material, not $k$, so we can’t continue to reduce the decontamination time by further increasing $k$. You might also notice that for small $k$ the contaminant is (slowly) reacted away in a large region, whereas for large $k$ it only manages to clean small pockets of contaminant, leading to sharp boundaries separating the cleansed and contaminated regions. # How much cleanser do we need? In practice, an easy way to speed up the cleaning process is to add more cleanser. The following pair of simulations lets us see this in action. In each, we're applying cleanser to the top of the concrete, but the simulation on the right is at double strength. Restart the process to get another look by pressing However, this approach is both wasteful and potentially dangerous: the cleaning chemical might be a strong acid or alkaline (like bleach) and so could damage the concrete if too much is left over after the decontamination. To measure this, we can define the efficiency of the decontamination process, which captures how much cleaning chemical is wasted: if the efficiency is 100% then all the cleaning chemical is used up in the decontamination, wasting nothing, but if the efficiency is low then lots of cleaning chemical is left in the concrete at the end of the decontamination. Here's a graph of efficiency vs decontamination time, where each point corresponds to a different amount of applied cleanser. As we've already seen, we find that the decontamination is faster when we increase the cleaning solution strength, but it is less efficient. In practice, we would need to choose what strength of cleaning solution to apply (i.e. where on the curve we sit) to get a good trade-off between speed and efficiency. This brings us to a final important question: # Is there a way to reduce waste? Since the concentration of applied cleanser is the easiest thing to control, can we apply it in a clever way to keep the decontamination fast, but reduce the wasted cleaning chemical? Let's explore this with some simulations. We've set up two views into the same simulation: on the left we see the decontaminant, just like before, whilst on the right we see the cleanser (darker blue means more cleanser). The goal: make both simulations go pure white. Use the slider below to adjust the strength of the applied cleanser throughout the decontamination process. A good idea is to start with a strong cleaning solution and gradually reduce the strength: this keeps the decontamination fast and the efficiency high. Can you find any better ways by exploring? Reset any time by pressing # About the decontamination model The mathematical model that we are using for these simulations is derived by considering the diffusion of the cleaning chemical and its reaction with the contaminant, within the pore space of the porous material. Rather than solve these equations in the very intricate, complicated pore-space domain, we’ve used a mathematical technique called homogenisation to average the equations. This makes them much easier and more computationally efficient to solve but keeps the important information from the underlying pore-space system. Specifically, the more contaminant there is, the harder it is to transport the cleaning chemical through the material, since the cleaning chemical has to navigate around the contaminant, in limited pore space. This manifests in the model as an effective diffusivity that depends on the local amount of contaminant. You can find more details on the mathematics discussed in this Story in the following articles: 1. Homogenisation problems in reactive decontamination (2019). EK Luckins, CJW Breward, IM Griffiths, Z Wilmott. [European Journal of Applied Mathematics 31(5), 782-805](https://doi.org/10.1017/S0956792519000263). 1. The effect of pore-scale contaminant distribution on the reactive decontamination of porous media (2023). EK Luckins, CJW Breward, IM Griffiths, CP Please. [European Journal of Applied Mathematics 1-41](https://doi.org/10.1017/S0956792523000219). 1. Optimising the Decontamination of Porous Building Materials (2023). H Turner. Masters thesis, University of Oxford. # Looking for more? Not quite had enough of decontamination? To investigate other parameters in the model, check out this fully customisable [simulation](/sim/?preset=decontaminationDemoSpots). Enjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com). Looking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from the [VisualPDE library](/explore). This Story was written in collaboration with [Dr Ellen Luckins](https://sites.google.com/view/ellen-luckins/).","url":"/visual-stories/decontamination","tags":["visual stories"],"img":"/assets/images/Decontamination.webp","page_number":30,"id":52},{"layout":"page","title":"Ocean spills","lesson_number":50,"thumbnail":"/assets/images/Ducks.webp","extract":"Ducks, advection and ocean flows","equation":"","categories":["visual stories"],"body":"On 10 January 1992, during a storm, a container full of bath toys fell off a ship travelling across the Pacific ocean. The container opened and the 28,000 toys, including yellow rubber ducks, were released. Over the next few months and years, the toys began to wash up on coastlines around the world, arriving in Alaska after about 10 months and Britain and Ireland around 15 years later. It is estimated that some travelled almost 30,000 km, carried by the ocean currents. This story has captured many imaginations over the years (including ours) and led to documentaries, scientific papers, news articles, children's books and more. You can read more about it on [Wikipedia](https://en.wikipedia.org/wiki/Friendly_Floatees_spill). In this Visual Story, we'll discuss the mathematics behind ocean modelling and present a simple model of the duck spillage. As with all our Visual Stories, the predictions of this model won't match up perfectly with reality, but should give us some intuition for the complex process of ocean transport. # Tracing ducks We'll model the ducks as 'tracer particles' in the ocean. The term 'tracer particles' refers to small objects that move with a fluid without really changing how it behaves. They are very common: examples include leaves on the surface of a river and, fortunately, rubber ducks in the ocean. Our simulations will try to track the amount of these particles in different parts of the ocean. Magnitude of east-west flow in the world's oceans. To do this, we'll need to know how water moves around in the ocean. Determining the fluid flow, however, is a difficult and time-consuming process that requires running large numerical simulations and cutting-edge science. We'll cheat and use existing simulations from [NASA](https://podaac.jpl.nasa.gov)[^1], which take into account factors including the Earth's rotation, the temperature of the water, and the phase of the moon (really). The video above shows the east–west flow velocity for 2023 from one of these simulations (eastward in red, westward in blue). We've taken this data and put it into the VisualPDE simulation below, along with a map of the world. You can click to add some ducks to the oceans, or watch as the ducks from the original spill spread across the ocean. Adjust the slider below the simulation to change the month of the year (which alters the flow) and see how that impacts the duck spill. # Strategic spillage An interesting question comes to mind: what if the ducks had been released elsewhere in the world? To explore this, we've set up another simulation down the page, but now clicking moves the source of ducks around. We've also added a slider that lets you control the amount of ducks being released[^2]. There's so much to find in these simulations, so here is some food for thought to guide your own exploration: 1. Do the ducks spread out faster when released at particular points? 1. Where is a good place to release the ducks such that they're washed up around your favourite coastal location (e.g. the UK)? 1. Are there any regions of the ocean that seem to collect ducks? Where are they, and why? # Looking for more? Did we whet your appetite for ducks? Check out the fullscreen, [fully customisable simulation](/sim/?preset=ducks) to play with more ducks and more parameters. Enjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com). Looking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from the [VisualPDE library](/explore). This Story was written in collaboration with [Dr Matthew Crowe](https://mncrowe.github.io/). ### Footnotes [^1]: The ocean simulation data was obtained from the [NASA ECCO2 dataset](https://ecco.jpl.nasa.gov/drive/files/ECCO2/cube92_latlon_quart_90S90N) (requires login). [^2]: Here, the amount of ducks released is technically unlimited, but that's a limitation of our model rather than a reflection of the number of ducks in the ocean. run_only_one_sim(['simA', 'simB']) ","url":"/visual-stories/ducks","tags":["visual stories"],"img":"/assets/images/Ducks.webp","page_number":50,"id":53},{"layout":"page","title":"Urban flooding","lesson_number":40,"thumbnail":"/assets/images/flooding.webp","extract":"Defending against surging rivers","equation":"","categories":["visual stories"],"body":"In this Story, we'll explore the most frequent type of natural disaster: flooding. The prediction and prevention of flooding is difficult and far from solved, so we'll focus on visualising a caricature of a flood event rather than the real thing. We've picked the city of Oxford (UK) as our case study, as it often falls foul of flooding and 2/3 of the VisualPDE team have lived there. The river Thames flows around the city centre, which is surrounded by natural floodplains and houses. The image below shows part of the landscape just south of the city centre, shaded by height, and includes one of the team's old houses. There is a river in the upper right corner, a housing estate on the left, and fields in between. Topographical LiDAR data from the [ARCHI MAPS UK website](https://www.archiuk.com); LiDAR tiles © Environment Agency copyright and/or database right 2022. All rights reserved. # Breaking the banks Flooding has a huge economic and social impact. In the simulation below, we'll explore what happens when a surge in the river causes the area around it to flood. Clicking in the simulation mimics emptying a (very large) bucket of water onto the environment, which spreads out and eventually seeps away into the ground. After you've played around with clicking, drag the slider to the right to increase the flow rate of the river to the maximum. The surging river quickly runs over the fields and encroaches on the road and the houses, eventually seeping down roads and into gardens and homes. But we can do more than explore a constantly surging river. Try resetting the simulation (or returning the flow to normal and waiting) and see what happens if you increase the flow and then decrease it again rapidly. This time, the river still bursts its banks but only manages to spread over the fields, with little to no impact on homes beyond the road. # Defending against flooding There are many ways to prevent flooding. We'll use VisualPDE to explore the effects of two types of defence: * improving drainage into the ground, * diverting flood water. Naturally, our examples won't necessarily reflect the real thing, but they might help us see how these types of defence can be protective. ## Improving drainage The simulation below lets us vary two things: the flow rate of the river (top slider) and the absorption of water into the ground (bottom slider). Try exploring what happens during a surge if we improve the drainage of water, fully increasing the absorption. Even at the maximum flow rate, fully improved drainage completely contains the flood within the fields, protecting the rest of the environment. Explore how reducing the level of improvement gradually causes more and more of the region to be flooded. ## Diverting flood water An alternative to improving the absorption of the terrain is constructing channels that divert flood water away from at-risk areas. In the simulation below, clicking now carves deep trenches into the environment (much larger and deeper than real flood defences). Try drawing your own flood defence network and see if it holds water against a river surge. In our simulations of continuous high flow, the river almost always wins, filling up the trenches and spilling past towards the city. However, the defences can be very effective against shorter periods of high flow. Test this for yourself by only briefly increasing the flow rate. # Looking for more? Flooding is a complicated issue and we certainly haven't explored everything in this Story. Hopefully, however, we've seen how different types of management can help alleviate the effects of urban flooding. If you want to explore more water-based simulations on VisualPDE, try out our [page on the effects of topography](/mathematical-biology/topography) or our [Story exploring ripples on a pond](/visual-stories/ripples). Enjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com). Many thanks to [Duncan Hewitt](https://www.damtp.cam.ac.uk/user/drh39/) for his help in bringing this Story to life. Looking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from the [VisualPDE library](/explore).","url":"/visual-stories/flooding","tags":["visual stories"],"img":"/assets/images/flooding.webp","page_number":40,"id":54},{"layout":"page","title":"Ripples on a pond","lesson_number":10,"thumbnail":"/assets/images/ShallowWaterBox.webp","extract":"Making waves in shallow water","equation":"","categories":["visual stories"],"body":"Waves on water can be mesmerising, especially the ripples that spread out after an object breaks the surface of an otherwise still liquid. Using VisualPDE, we can play around with water waves without any risk of spillages. Below you'll find a VisualPDE simulation set up to let us explore what happens when we press down on the surface of shallow water, just like a drop of water does as it hits the surface. Try clicking in the container to simulate a droplet landing in a still body of water. # Making waves The drop of liquid immediately disturbs the surface, causing ripples to quickly spread out and fill the container. As soon as the ripples hit the edge of the box, they reflect back and mix with any waves still heading towards the edges. Eventually, these reflected ripples collide with those bouncing off the opposite wall, leading to large peaks and deep troughs. Curiously, after the ripples collide with one another, they seem to just carry on as if nothing had happened. In fact, the mathematics behind this type of waves tells us that this *always* happens. You can see this phenomenon at work when you throw multiple droplets into the water in rapid succession. You can try this out in real life, or you can press {{ layout.erase }} to reset the simulation and click in a few different places one after the other to try this out with VisualPDE in a water-free way. Regardless of which option you choose, you'll see the ripples pass right through each other, creating ever-changing patterns of overlapping circles. You might notice that, as time goes by, the ripples become less and less prominent, until they completely fade away. This is because the waves are losing energy all the time (due to friction and the slight stickiness of the water), leading to a smoother surface that will eventually become still again. All the waves that we've made so far have been pretty small. To generate bigger, wider waves, keep your mouse/pointer clicked on the same spot for a few seconds and then let go. Now we get different, large-scale patterns emerging on the surface of the water, whose size comes close to the limits of the theory that we're using to simulate water waves with VisualPDE. # Time for reflection There is a lot left to explore about waves even in this simple-looking setting, such as investigating what happens when you click and drag? For now, we'll end this short exploration with something that's difficult to see in real life: perfect reflections in a circular container. In the simulation below, we've paused a simulation *just* as a drop of water hits the surface, precisely in the centre of a disc-shaped container. Press {{ layout.play }} to see ripples surge out from the disturbance and reflect simultaneously off the curved boundary, creating ever-more-complicated patterns that are (almost) perfectly symmetric. If you like chaos, you can break the symmetry by clicking anywhere to disturb the surface. # Looking for more? Not quite had enough of water waves? For a different perspective on this Visual Story, try pressing {{ layout.views }} → **3D** in either of the simulations above. What you'll see is the surface of the water drawn in 3D – try dragging to change the view, or clicking on the surface to disturb it, and experience a new point of view. Enjoyed this Visual Story? We'd love to hear your feedback at [hello@visualpde.com](mailto:hello@visualpde.com). Looking for more VisualPDE? Try out our other [Visual Stories](/visual-stories) or some mathematically flavoured content from the [VisualPDE library](/explore). ","url":"/visual-stories/ripples","tags":["visual stories"],"img":"/assets/images/ShallowWaterBox.webp","page_number":10,"id":55},{"layout":"about","title":"About","permalink":"/about/","thumbnail":"/assets/images/question-marks.webp","extract":"What is VisualPDE, where did it come from and who is behind it?","body":"## The idea Communicating mathematics can be challenging. This is especially true for [partial differential equations](https://en.wikipedia.org/wiki/Partial_differential_equation) (PDEs), which are a staple of undergraduate mathematics courses and almost ubiquitous in mathematical modelling of the real world. Many of these equations exhibit intuitive behaviours, but it can be hard to see that just by looking at the symbols. We set out to create a tool for solving this problem, aiming to allow anyone to type in their PDE and instantly visualise and interact with solutions of these equations. Crucially, we wanted people to be able to do this without needing to take a course on numerical methods, or even one on PDEs. Read more about VisualPDE and its context in our article in the [Bulletin of Mathematical Biology](https://doi.org/10.1007/s11538-023-01218-4). ## Beginnings Through a [Durham Centre for Academic Development](https://www.durham.ac.uk/departments/centres/academic-development/) collaborative innovation grant, Alex Chudasama (a final-year undergraduate at Durham University) designed an early version based on this [reaction–diffusion simulator](https://pmneila.github.io/jsexp/grayscott/). From this proof-of-concept, development of what became VisualPDE took off and we released the first public version in April 2023. Since then, we've kept expanding VisualPDE and its applications, from education and research to knowledge exchange and public engagement. ## VisualPDE today Today, VisualPDE is both a simulator and a collection of examples for exploring the world of PDEs. VisualPDE has been used around the world to teach, engage and interact with mathematics and science through tens of thousands of simulations. Some external applications of VisualPDE include: - An interactive logo for the [Society for Mathematical Biology](https://smb.org) - [Visualising landslides](https://imibath.ac.uk/news/landslide-early-warning-system/) using real topographical data from Brazil, with the Institute for Mathematical Innovation, University of Bath - Providing figures and supporting simulations for a rigorous [study of localised pattern formation in dryland vegetation](https://arxiv.org/abs/2309.02956) - Numerical simulation of temporal and spatiotemporal oscillations in a [model of viral cancer therapy](https://doi.org/10.1101/2023.12.19.572433) - A [paper](https://link.springer.com/article/10.1007/s11538-023-01250-4) demonstrating the insufficiency of linear stability theory in understanding Turing patterns - Exploring the principles behind the design of simple but effective robotic filaments for microscale swimming in a [multidisciplinary paper](https://doi.org/10.48550/arXiv.2402.13844) ## Using VisualPDE Everyone is free to use VisualPDE (see our [licence](https://github.com/Pecnut/visual-pde/blob/main/LICENSE.md) if you're looking for industrial use). Anyone can [explore the examples](/explore), [design their own](/create) simulations and share them with a URL, or even copy the markdown-based website from [GitHub](https://github.com/Pecnut/visual-pde) to design their own version of our website. Our collections of [Visual Stories](/visual-stories) are a good place to start exploring, after which you can delve into our other [collections and examples](/explore). You can also check out our detailed [User guide](/user-guide) to dive under the hood. If you use VisualPDE in your research, we'd be grateful if you could cite our article about the context, design, and applications of VisualPDE in the [Bulletin of Mathematical Biology](https://doi.org/10.1007/s11538-023-01218-4). ## The team VisualPDE is a team effort, written and maintained by [Benjamin Walker](https://benjaminwalker.info/), [Adam Townsend](https://adamtownsend.com/) and [Andrew Krause](https://www.andrewkrause.org/). ","url":"/about","tags":"","equation":"","img":"/assets/images/question-marks.webp","page_number":100,"id":56},{"title":"Contact","layout":"suggestions","body":"","url":"/contact","tags":"","extract":"","equation":"","img":"","page_number":100,"id":57},{"layout":"create","title":"Create","thumbnail":"/assets/images/OnceUponATime.webp","extract":"Create and share your own simulations","body":"","url":"/create","tags":"","equation":"","img":"/assets/images/OnceUponATime.webp","page_number":100,"id":58},{"layout":"explore","title":"Explore","collection_to_list":"explore","thumbnail":"/assets/images/Library.webp","extract":"Explore the VisualPDE library","body":"","url":"/explore","tags":"","equation":"","img":"/assets/images/Library.webp","page_number":100,"id":59},{"layout":"topic","title":"Fluids and waves","thumbnail":"/assets/images/Fluids.webp","extract":"Water, waves, and all things fluids","posts":"ripples dipoles method_of_images shallow_water","body":"Water, honey, lava, air - fluids can be found everywhere. We've put together some examples that explore some of the mathematics behind fluid modelling. There's even a [Visual Story](/visual-stories/ripples) if you want a maths-free way of interacting with fluids. ","url":"/fluids","tags":"","equation":"","img":"/assets/images/Fluids.webp","page_number":100,"id":60},{"title":"Interactive simulation","layout":"sim","permalink":"/sim/","body":"","url":"/sim","tags":"","extract":"","equation":"","img":"","page_number":100,"id":61},{"layout":"docs","title":"User guide","collection_to_list":"user-guide","thumbnail":"/assets/images/squirrel-question.webp","extract":"Everything there is to know about VisualPDE","body":"VisualPDE is packed full of features. We've compiled a complete user guide, quick tips and much more to help you explore with VisualPDE.","url":"/user-guide","tags":"","equation":"","img":"/assets/images/squirrel-question.webp","page_number":100,"id":62},{"layout":"visual_stories","title":"Visual Stories","collection_to_list":"visual-stories","thumbnail":"/assets/images/OnceUponATime.webp","extract":"Not a mathematician? No problem","body":"","url":"/visual-stories","tags":"","equation":"","img":"/assets/images/OnceUponATime.webp","page_number":100,"id":63}]